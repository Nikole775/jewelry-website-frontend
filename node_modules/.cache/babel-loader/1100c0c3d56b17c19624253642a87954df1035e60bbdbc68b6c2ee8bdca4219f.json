{"ast":null,"code":"/*const LOCAL_STORAGE_KEY = 'jewelry_offline_queue';\r\nconst LOCAL_ITEMS_KEY = 'offline_local_items';\r\n\r\nexport function getQueue() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function queueOperation(op) {\r\n    const queue = getQueue();\r\n    queue.push(op);\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\r\n\r\n    if (op.type === 'POST') {\r\n        const localItems = JSON.parse(localStorage.getItem(LOCAL_ITEMS_KEY) || '[]');\r\n        localItems.push({ ...op.data, id: `temp-${Date.now()}` });\r\n        localStorage.setItem(LOCAL_ITEMS_KEY, JSON.stringify(localItems));\r\n    }\r\n}\r\n\r\nexport async function syncQueue(isOnline, serverAvailable) {\r\n    if (!isOnline || !serverAvailable) return;\r\n\r\n    const queue = getQueue();\r\n    const remainingOps = [];\r\n    const API_URL = \"http://localhost:4000/items\";\r\n\r\n    for (let op of queue) {\r\n        try {\r\n            if (op.type === 'POST') {\r\n                await fetch(API_URL, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n            }\r\n        } catch (err) {\r\n            remainingOps.push(op);\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\r\n    if (!remainingOps.some(op => op.type === 'POST')) {\r\n        localStorage.removeItem(LOCAL_ITEMS_KEY);\r\n    }\r\n}\r\n\r\nexport function getLocalItems() {\r\n    const raw = localStorage.getItem(LOCAL_ITEMS_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}*/\n\nconst LOCAL_STORAGE_KEY = 'jewelry_offline_queue';\nconst LOCAL_ITEMS_KEY = 'offline_local_items';\nconst API_URL = \"http://localhost:4000/api/products\";\nlet syncTimeout;\nexport function getQueue() {\n  const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n  return raw ? JSON.parse(raw) : [];\n}\nexport function getLocalItems() {\n  const raw = localStorage.getItem(LOCAL_ITEMS_KEY);\n  return raw ? JSON.parse(raw) : [];\n}\nexport function queueOperation(op) {\n  const queue = getQueue();\n  queue.push(op);\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\n\n  // Keep track of local items for offline UI rendering\n  if (op.type === 'POST') {\n    const localItems = getLocalItems();\n    localItems.push({\n      ...op.data,\n      id: `temp-${Date.now()}`\n    });\n    localStorage.setItem(LOCAL_ITEMS_KEY, JSON.stringify(localItems));\n  }\n\n  // Try syncing after queueing (debounced)\n  triggerSync();\n}\nexport function triggerSync() {\n  if (syncTimeout) clearTimeout(syncTimeout);\n  syncTimeout = setTimeout(() => syncQueue(navigator.onLine), 1000);\n}\nexport async function syncQueue(isOnline = navigator.onLine, serverAvailable = true) {\n  if (!isOnline || !serverAvailable) return;\n  const queue = getQueue();\n  const remainingOps = [];\n  for (let op of queue) {\n    try {\n      if (op.type === 'POST') {\n        await fetch(API_URL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(op.data)\n        });\n      } else if (op.type === 'PATCH') {\n        await fetch(`${API_URL}/${op.id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(op.data)\n        });\n      } else if (op.type === 'DELETE') {\n        await fetch(`${API_URL}/${op.id}`, {\n          method: 'DELETE'\n        });\n      }\n    } catch (err) {\n      console.error(\"Sync failed for operation\", op, err);\n      remainingOps.push(op); // Retry later\n    }\n  }\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\n\n  // Clear temp local items only if no unsynced POSTs remain\n  if (!remainingOps.some(op => op.type === 'POST')) {\n    localStorage.removeItem(LOCAL_ITEMS_KEY);\n  }\n}","map":{"version":3,"names":["LOCAL_STORAGE_KEY","LOCAL_ITEMS_KEY","API_URL","syncTimeout","getQueue","raw","localStorage","getItem","JSON","parse","getLocalItems","queueOperation","op","queue","push","setItem","stringify","type","localItems","data","id","Date","now","triggerSync","clearTimeout","setTimeout","syncQueue","navigator","onLine","isOnline","serverAvailable","remainingOps","fetch","method","headers","body","err","console","error","some","removeItem"],"sources":["C:/Users/labon/jewelry-frontend/jewelry-website/frontEnd/src/utils/offlineQueue.js"],"sourcesContent":["/*const LOCAL_STORAGE_KEY = 'jewelry_offline_queue';\r\nconst LOCAL_ITEMS_KEY = 'offline_local_items';\r\n\r\nexport function getQueue() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function queueOperation(op) {\r\n    const queue = getQueue();\r\n    queue.push(op);\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\r\n\r\n    if (op.type === 'POST') {\r\n        const localItems = JSON.parse(localStorage.getItem(LOCAL_ITEMS_KEY) || '[]');\r\n        localItems.push({ ...op.data, id: `temp-${Date.now()}` });\r\n        localStorage.setItem(LOCAL_ITEMS_KEY, JSON.stringify(localItems));\r\n    }\r\n}\r\n\r\nexport async function syncQueue(isOnline, serverAvailable) {\r\n    if (!isOnline || !serverAvailable) return;\r\n\r\n    const queue = getQueue();\r\n    const remainingOps = [];\r\n    const API_URL = \"http://localhost:4000/items\";\r\n\r\n    for (let op of queue) {\r\n        try {\r\n            if (op.type === 'POST') {\r\n                await fetch(API_URL, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n            }\r\n        } catch (err) {\r\n            remainingOps.push(op);\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\r\n    if (!remainingOps.some(op => op.type === 'POST')) {\r\n        localStorage.removeItem(LOCAL_ITEMS_KEY);\r\n    }\r\n}\r\n\r\nexport function getLocalItems() {\r\n    const raw = localStorage.getItem(LOCAL_ITEMS_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}*/\r\n\r\nconst LOCAL_STORAGE_KEY = 'jewelry_offline_queue';\r\nconst LOCAL_ITEMS_KEY = 'offline_local_items';\r\nconst API_URL = \"http://localhost:4000/api/products\";\r\n\r\nlet syncTimeout;\r\n\r\nexport function getQueue() {\r\n    const raw = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function getLocalItems() {\r\n    const raw = localStorage.getItem(LOCAL_ITEMS_KEY);\r\n    return raw ? JSON.parse(raw) : [];\r\n}\r\n\r\nexport function queueOperation(op) {\r\n    const queue = getQueue();\r\n    queue.push(op);\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(queue));\r\n\r\n    // Keep track of local items for offline UI rendering\r\n    if (op.type === 'POST') {\r\n        const localItems = getLocalItems();\r\n        localItems.push({ ...op.data, id: `temp-${Date.now()}` });\r\n        localStorage.setItem(LOCAL_ITEMS_KEY, JSON.stringify(localItems));\r\n    }\r\n\r\n    // Try syncing after queueing (debounced)\r\n    triggerSync();\r\n}\r\n\r\nexport function triggerSync() {\r\n    if (syncTimeout) clearTimeout(syncTimeout);\r\n    syncTimeout = setTimeout(() => syncQueue(navigator.onLine), 1000);\r\n}\r\n\r\nexport async function syncQueue(isOnline = navigator.onLine, serverAvailable = true) {\r\n    if (!isOnline || !serverAvailable) return;\r\n\r\n    const queue = getQueue();\r\n    const remainingOps = [];\r\n\r\n    for (let op of queue) {\r\n        try {\r\n            if (op.type === 'POST') {\r\n                await fetch(API_URL, {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n\r\n            } else if (op.type === 'PATCH') {\r\n                await fetch(`${API_URL}/${op.id}`, {\r\n                    method: 'PATCH',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(op.data),\r\n                });\r\n\r\n            } else if (op.type === 'DELETE') {\r\n                await fetch(`${API_URL}/${op.id}`, {\r\n                    method: 'DELETE'\r\n                });\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(\"Sync failed for operation\", op, err);\r\n            remainingOps.push(op); // Retry later\r\n        }\r\n    }\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(remainingOps));\r\n\r\n    // Clear temp local items only if no unsynced POSTs remain\r\n    if (!remainingOps.some(op => op.type === 'POST')) {\r\n        localStorage.removeItem(LOCAL_ITEMS_KEY);\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,iBAAiB,GAAG,uBAAuB;AACjD,MAAMC,eAAe,GAAG,qBAAqB;AAC7C,MAAMC,OAAO,GAAG,oCAAoC;AAEpD,IAAIC,WAAW;AAEf,OAAO,SAASC,QAAQA,CAAA,EAAG;EACvB,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACP,iBAAiB,CAAC;EACnD,OAAOK,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAG,EAAE;AACrC;AAEA,OAAO,SAASK,aAAaA,CAAA,EAAG;EAC5B,MAAML,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACN,eAAe,CAAC;EACjD,OAAOI,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAG,EAAE;AACrC;AAEA,OAAO,SAASM,cAAcA,CAACC,EAAE,EAAE;EAC/B,MAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxBS,KAAK,CAACC,IAAI,CAACF,EAAE,CAAC;EACdN,YAAY,CAACS,OAAO,CAACf,iBAAiB,EAAEQ,IAAI,CAACQ,SAAS,CAACH,KAAK,CAAC,CAAC;;EAE9D;EACA,IAAID,EAAE,CAACK,IAAI,KAAK,MAAM,EAAE;IACpB,MAAMC,UAAU,GAAGR,aAAa,CAAC,CAAC;IAClCQ,UAAU,CAACJ,IAAI,CAAC;MAAE,GAAGF,EAAE,CAACO,IAAI;MAAEC,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC;IAAG,CAAC,CAAC;IACzDhB,YAAY,CAACS,OAAO,CAACd,eAAe,EAAEO,IAAI,CAACQ,SAAS,CAACE,UAAU,CAAC,CAAC;EACrE;;EAEA;EACAK,WAAW,CAAC,CAAC;AACjB;AAEA,OAAO,SAASA,WAAWA,CAAA,EAAG;EAC1B,IAAIpB,WAAW,EAAEqB,YAAY,CAACrB,WAAW,CAAC;EAC1CA,WAAW,GAAGsB,UAAU,CAAC,MAAMC,SAAS,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,IAAI,CAAC;AACrE;AAEA,OAAO,eAAeF,SAASA,CAACG,QAAQ,GAAGF,SAAS,CAACC,MAAM,EAAEE,eAAe,GAAG,IAAI,EAAE;EACjF,IAAI,CAACD,QAAQ,IAAI,CAACC,eAAe,EAAE;EAEnC,MAAMjB,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxB,MAAM2B,YAAY,GAAG,EAAE;EAEvB,KAAK,IAAInB,EAAE,IAAIC,KAAK,EAAE;IAClB,IAAI;MACA,IAAID,EAAE,CAACK,IAAI,KAAK,MAAM,EAAE;QACpB,MAAMe,KAAK,CAAC9B,OAAO,EAAE;UACjB+B,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAE3B,IAAI,CAACQ,SAAS,CAACJ,EAAE,CAACO,IAAI;QAChC,CAAC,CAAC;MAEN,CAAC,MAAM,IAAIP,EAAE,CAACK,IAAI,KAAK,OAAO,EAAE;QAC5B,MAAMe,KAAK,CAAC,GAAG9B,OAAO,IAAIU,EAAE,CAACQ,EAAE,EAAE,EAAE;UAC/Ba,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAE3B,IAAI,CAACQ,SAAS,CAACJ,EAAE,CAACO,IAAI;QAChC,CAAC,CAAC;MAEN,CAAC,MAAM,IAAIP,EAAE,CAACK,IAAI,KAAK,QAAQ,EAAE;QAC7B,MAAMe,KAAK,CAAC,GAAG9B,OAAO,IAAIU,EAAE,CAACQ,EAAE,EAAE,EAAE;UAC/Ba,MAAM,EAAE;QACZ,CAAC,CAAC;MACN;IAEJ,CAAC,CAAC,OAAOG,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAE1B,EAAE,EAAEwB,GAAG,CAAC;MACnDL,YAAY,CAACjB,IAAI,CAACF,EAAE,CAAC,CAAC,CAAC;IAC3B;EACJ;EAEAN,YAAY,CAACS,OAAO,CAACf,iBAAiB,EAAEQ,IAAI,CAACQ,SAAS,CAACe,YAAY,CAAC,CAAC;;EAErE;EACA,IAAI,CAACA,YAAY,CAACQ,IAAI,CAAC3B,EAAE,IAAIA,EAAE,CAACK,IAAI,KAAK,MAAM,CAAC,EAAE;IAC9CX,YAAY,CAACkC,UAAU,CAACvC,eAAe,CAAC;EAC5C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}