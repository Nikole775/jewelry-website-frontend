{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\labon\\\\jewelry-frontend\\\\jewelry-website\\\\frontEnd\\\\src\\\\pages\\\\App.js\",\n  _s = $RefreshSig$();\n//!!!!silver + infinitescroll + offline setup\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { syncQueue, getLocalItems, queueOperation } from './offlineQueue';\r\nimport HomePage from \"./HomePage\";\r\nimport YourPage from \"./YourPage\";\r\nimport Charts from \"./Charts\";\r\nimport \"./App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const [serverAvailable, setServerAvailable] = useState(true);\r\n    const [videoBuffer, setVideoBuffer] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!videoBuffer) return; // Prevent error if undefined\r\n        const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n        const url = URL.createObjectURL(blob);\r\n        setVideoUrl(url);\r\n\r\n        // Clean up the URL object when component unmounts or buffer changes\r\n        return () => URL.revokeObjectURL(url);\r\n    }, [videoBuffer]);\r\n\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        if (videoBuffer) {\r\n            const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n            const url = URL.createObjectURL(blob);\r\n            setVideoUrl(url);\r\n\r\n            return () => URL.revokeObjectURL(url); // cleanup on unmount or change\r\n        }\r\n    }, [videoBuffer]);\r\n\r\n\r\n    // Network status detection and server check\r\n    useEffect(() => {\r\n        const updateOnlineStatus = () => {\r\n            const newStatus = navigator.onLine;\r\n            setIsOnline(newStatus);\r\n            if (newStatus) checkServerAvailability(); // Check server immediately when coming online\r\n        };\r\n\r\n        const checkServerAvailability = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/health`, {\r\n                    signal: AbortSignal.timeout(3000) // Timeout after 3 seconds\r\n                });\r\n                setServerAvailable(res.ok);\r\n            } catch (err) {\r\n                setServerAvailable(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n\r\n        // Initial checks\r\n        updateOnlineStatus(); // This will check both network and server status\r\n        const interval = setInterval(checkServerAvailability, 10000);\r\n\r\n        return () => {\r\n            window.removeEventListener('online', updateOnlineStatus);\r\n            window.removeEventListener('offline', updateOnlineStatus);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkInternetConnection = async () => {\r\n            try {\r\n                // Pinging a reliable public URL (can use your server or a public site)\r\n                const onlineCheck = await fetch(\"https://www.google.com/favicon.ico\", {\r\n                    method: \"HEAD\",\r\n                    mode: \"no-cors\"\r\n                });\r\n\r\n                // If no error is thrown, assume online\r\n                setIsOnline(true);\r\n            } catch (err) {\r\n                console.warn(\"No internet connection detected\");\r\n                setIsOnline(false);\r\n            }\r\n        };\r\n\r\n        // Run once at start and then every 10 seconds\r\n        checkInternetConnection();\r\n        const interval = setInterval(checkInternetConnection, 10000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n     // WebSocket connection - only when properly online\r\n    useEffect(() => {\r\n        if (isOnline && serverAvailable) {\r\n            const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n            setSocket(ws);\r\n\r\n            ws.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                console.log('WebSocket message received:', message);\r\n\r\n                if (isOnline && serverAvailable) {\r\n                    switch (message.type) {\r\n                        case 'INITIAL_DATA':\r\n                            setItems(prev => [...message.data, ...getLocalItems()]);\r\n                            break;\r\n                        case 'NEW_AUTO_ITEM':\r\n                            setItems(prev => [...prev, message.data]);\r\n                            break;\r\n                        case 'NEW_ITEM':\r\n                        case 'UPDATED_ITEM':\r\n                        case 'DELETED_ITEM':\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return () => ws.close();\r\n        }\r\n    }, [isOnline, serverAvailable]);\r\n\r\n    // Fetch items with offline fallback\r\n    const fetchItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/items?${query.toString()}`);\r\n            const data = await res.json();\r\n            setItems([...data, ...getLocalItems()]);\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n            setItems(getLocalItems());\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchItems();\r\n    }, [filterStyle, filterCategory, sortPrice]);\r\n\r\n    // CRUD Operations with proper offline handling\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n        const itemToAdd = { ...newItem, userAdded: true };\r\n        const operation = { type: 'POST', data: itemToAdd };\r\n\r\n        const videoFile = e.target.video?.files?.[0]; // from form input\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/items`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(itemToAdd),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                const data = await res.json();\r\n\r\n                if (videoFile) {\r\n                    const formData = new FormData();\r\n                    formData.append(\"video\", videoFile);\r\n                    const videoRes = await fetch(`${API_URL}/api/products/${data.id}/video`, {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    });\r\n                    const videoData = await videoRes.json();\r\n                    data.video = videoData.video;\r\n                    data.videoUrl = videoData.videoUrl;\r\n                }\r\n\r\n                setItems(prev => [...prev, data]);\r\n            } catch (err) {\r\n                console.error(\"Failed to add item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile ? videoFile.name : null }]); }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile ? videoFile.name : null }]);   }\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem(item);\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n        const operation = { type: 'PATCH', id: editItem.id, data: newItem };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/items/${editItem.id}`, {\r\n                    method: \"PATCH\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(newItem),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error('Failed to update item');\r\n                const updatedItem = await res.json();\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? updatedItem : item));\r\n            } catch (err) {\r\n                console.error(\"Failed to update item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n        }\r\n        setEditing(false);\r\n        setEditItem(null);\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleDeleteItem = async (id) => {\r\n        const operation = { type: 'DELETE', id };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                await fetch(`${API_URL}/items/${id}`, {\r\n                    method: 'DELETE',\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            } catch (err) {\r\n                console.error(\"Failed to delete item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.filter(item => item.id !== id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n\r\n            {!isOnline && (\r\n                <div style={{ backgroundColor: \"red\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    You are currently offline. Some features may not be available.\r\n                </div>\r\n            )}\r\n\r\n            {isOnline && !serverAvailable && (\r\n                <div style={{ backgroundColor: \"orange\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    Server is unavailable. Using offline mode.\r\n                </div>\r\n            )}\r\n\r\n            {/* Network status banner }\r\n{\r\n    !isOnline || !serverAvailable ? (\r\n        <div className=\"offline-banner\">\r\n            {!isOnline ? \"You are offline\" : \"Server unavailable\"} - Working locally\r\n        </div>\r\n    ) : (\r\n    <div className=\"online-banner\">Connected to server</div>\r\n)\r\n}\r\n\r\n<nav>\r\n    <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n    <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n    <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n</nav>\r\n\r\n{\r\n    currentPage === \"Home\" ? (\r\n        <HomePage\r\n            items={items}\r\n            setItems={setItems}\r\n            search={search}\r\n            setSearch={setSearch}\r\n            filterStyle={filterStyle}\r\n            setFilterStyle={setFilterStyle}\r\n            filterCategory={filterCategory}\r\n            setFilterCategory={setFilterCategory}\r\n            sortPrice={sortPrice}\r\n            setSortPrice={setSortPrice}\r\n            styles={styles}\r\n            categories={categories}\r\n            isOnline={isOnline}\r\n            serverAvailable={serverAvailable}\r\n            videoUrl={videoUrl}\r\n        />\r\n    ) : currentPage === \"YourPage\" ? (\r\n        <YourPage\r\n            items={items}\r\n            handleAddItem={handleAddItem}\r\n            handleSaveEdit={handleSaveEdit}\r\n            handleDeleteItem={handleDeleteItem}\r\n            handleEditItem={handleEditItem}\r\n            newItem={newItem}\r\n            setNewItem={setNewItem}\r\n            editing={editing}\r\n            setEditing={setEditing}\r\n            styles={styles}\r\n            categories={categories}\r\n            isOnline={isOnline}\r\n            serverAvailable={serverAvailable}\r\n        />\r\n    ) : (\r\n    <Charts items={items} socket={socket} />\r\n)\r\n}\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default App; */\n\n/*import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { syncQueue, getLocalItems, queueOperation } from '../utils/offlineQueue.js';\r\nimport HomePage from \"../pages/HomePage.js\";\r\nimport YourPage from \"../pages/YourPage.js\";\r\nimport Charts from \"../pages/Charts.js\";\r\nimport \"../App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const [serverAvailable, setServerAvailable] = useState(true);\r\n    const [videoBuffer, setVideoBuffer] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const localItems = getLocalItems();\r\n            if (items.length < 4 && localItems.length > 0) {\r\n                const existingIds = new Set(items.map(item => item.id));\r\n                const newItems = localItems.filter(item => !existingIds.has(item.id));\r\n                if (newItems.length > 0) {\r\n                    setItems(prev => [...prev, ...newItems]);\r\n                }\r\n            }\r\n        }, 3000); // Check every 3 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, [items]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!videoBuffer) return; // Prevent error if undefined\r\n        const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n        const url = URL.createObjectURL(blob);\r\n        setVideoUrl(url);\r\n\r\n        // Clean up the URL object when component unmounts or buffer changes\r\n        return () => URL.revokeObjectURL(url);\r\n    }, [videoBuffer]);\r\n\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        if (videoBuffer) {\r\n            const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n            const url = URL.createObjectURL(blob);\r\n            setVideoUrl(url);\r\n\r\n            return () => URL.revokeObjectURL(url); // cleanup on unmount or change\r\n        }\r\n    }, [videoBuffer]);\r\n\r\n    const loadItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const serverItems = await res.json();\r\n\r\n            const localItems = getLocalItems();\r\n\r\n            // Deduplicate by ID (localItems override serverItems for same ID)\r\n            const map = new Map();\r\n\r\n            serverItems.forEach(item => map.set(item.id, item));\r\n            localItems.forEach(item => map.set(item.id, item));\r\n\r\n            setItems(Array.from(map.values()));\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch items:\", error);\r\n\r\n            // fallback to local items only\r\n            const localItems = getLocalItems();\r\n            setItems(localItems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" && isOnline && serverAvailable) {\r\n            loadItems();\r\n        }\r\n    }, [currentPage, filterStyle, filterCategory, sortPrice, isOnline, serverAvailable]);\r\n\r\n\r\n    // Network status detection and server check\r\n    useEffect(() => {\r\n        const updateOnlineStatus = () => {\r\n            const newStatus = navigator.onLine;\r\n            setIsOnline(newStatus);\r\n            if (newStatus) checkServerAvailability(); // Check server immediately when coming online\r\n        };\r\n\r\n        const checkServerAvailability = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/health`, {\r\n                    signal: AbortSignal.timeout(3000) // Timeout after 3 seconds\r\n                });\r\n                setServerAvailable(res.ok);\r\n            } catch (err) {\r\n                setServerAvailable(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n\r\n        // Initial checks\r\n        updateOnlineStatus(); // This will check both network and server status\r\n        const interval = setInterval(checkServerAvailability, 10000);\r\n\r\n        return () => {\r\n            window.removeEventListener('online', updateOnlineStatus);\r\n            window.removeEventListener('offline', updateOnlineStatus);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkInternetConnection = async () => {\r\n            try {\r\n                // Pinging a reliable public URL (can use your server or a public site)\r\n                const onlineCheck = await fetch(\"https://www.google.com/favicon.ico\", {\r\n                    method: \"HEAD\",\r\n                    mode: \"no-cors\"\r\n                });\r\n\r\n                // If no error is thrown, assume online\r\n                setIsOnline(true);\r\n            } catch (err) {\r\n                console.warn(\"No internet connection detected\");\r\n                setIsOnline(false);\r\n            }\r\n        };\r\n\r\n        // Run once at start and then every 10 seconds\r\n        checkInternetConnection();\r\n        const interval = setInterval(checkInternetConnection, 10000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            if (!isOnline || !serverAvailable) return;\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/categories`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch categories\");\r\n                const data = await res.json();\r\n                setCategoryList(data);\r\n            } catch (err) {\r\n                console.error(\"Error fetching categories:\", err);\r\n            }\r\n        };\r\n\r\n        fetchCategories();\r\n    }, [isOnline, serverAvailable]);\r\n\r\n\r\n     // WebSocket connection - only when properly online\r\n    useEffect(() => {\r\n        if (isOnline && serverAvailable) {\r\n            syncQueue();\r\n            const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n            setSocket(ws);\r\n\r\n            ws.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                console.log('WebSocket message received:', message);\r\n\r\n                if (isOnline && serverAvailable) {\r\n                    switch (message.type) {\r\n                        case 'INITIAL_DATA':\r\n                            setItems(prev => {\r\n                                const existingIds = new Set(prev.map(item => item.id));\r\n                                const newItems = message.data.filter(item => !existingIds.has(item.id));\r\n                                return [...prev, ...newItems, ...getLocalItems()];\r\n                            });\r\n                            break;\r\n                        case 'NEW_AUTO_ITEM':\r\n                            setItems(prev => [...prev, message.data]);\r\n                            break;\r\n                        case 'NEW_ITEM':\r\n                        case 'UPDATED_ITEM':\r\n                        case 'DELETED_ITEM':\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return () => ws.close();\r\n        }\r\n    }, [isOnline, serverAvailable]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" || currentPage === \"YourPage\") {\r\n            const localItems = getLocalItems();\r\n            setItems(prev => {\r\n                const existingIds = new Set(prev.map(item => item.id));\r\n                const merged = [...prev, ...localItems.filter(item => !existingIds.has(item.id))];\r\n                return merged;\r\n            });\r\n        }\r\n    }, [currentPage]);\r\n\r\n\r\n    // Fetch items with offline fallback\r\n    const fetchItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const serverItems = await res.json();\r\n\r\n            setItems(prev => {\r\n                const localItems = getLocalItems();\r\n                const existingIds = new Set(localItems.map(item => item.id));\r\n                // Filter out local items from serverItems to avoid duplicates\r\n                const filteredServerItems = serverItems.filter(item => !existingIds.has(item.id));\r\n                return [...filteredServerItems, ...localItems];\r\n            });\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n            const localItems = getLocalItems();\r\n            setItems(localItems);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" && isOnline && serverAvailable) {\r\n            fetchItems();\r\n        }\r\n    }, [filterStyle, filterCategory, sortPrice, currentPage, isOnline, serverAvailable]);\r\n\r\n\r\n    // CRUD Operations with proper offline handling\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const categoryId = parseInt(newItem.category);\r\n        if (!categoryId || isNaN(categoryId)) {\r\n            alert(\"Please select a valid category\");\r\n            return;\r\n        }\r\n\r\n        const itemToAdd = {\r\n            ...newItem,\r\n            userAdded: true,\r\n            category_id: categoryId,\r\n        };\r\n\r\n        delete itemToAdd.category; // Clean up any leftover string-based field\r\n\r\n        const operation = { type: 'POST', data: itemToAdd };\r\n        const videoFile = e.target.video?.files?.[0];\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/products`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(itemToAdd),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error(\"Failed to add product\");\r\n                const data = await res.json();\r\n\r\n                if (videoFile) {\r\n                    const formData = new FormData();\r\n                    formData.append(\"video\", videoFile);\r\n                    const videoRes = await fetch(`${API_URL}/api/products/${data.id}/video`, {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    });\r\n                    const videoData = await videoRes.json();\r\n                    data.video = videoData.video;\r\n                    data.videoUrl = videoData.videoUrl;\r\n                }\r\n\r\n                setItems(prev => [...prev, data]);\r\n            } catch (err) {\r\n                console.error(\"Failed to add item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile?.name || null }]);\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile?.name || null }]);\r\n        }\r\n\r\n        // Reset form\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem(item);\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n        const operation = { type: 'PATCH', id: editItem.id, data: newItem };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/products/${editItem.id}`, {\r\n                    method: \"PATCH\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer dummy-token\"\r\n                    },\r\n                    body: JSON.stringify(newItem),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error('Failed to update item');\r\n                const updatedItem = await res.json();\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? updatedItem : item));\r\n            } catch (err) {\r\n                console.error(\"Failed to update item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n        }\r\n        setEditing(false);\r\n        setEditItem(null);\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleDeleteItem = async (id) => {\r\n        const operation = { type: 'DELETE', id };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                await fetch(`${API_URL}/api/products/${id}`, {\r\n                    method: 'DELETE',\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            } catch (err) {\r\n                console.error(\"Failed to delete item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.filter(item => item.id !== id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n\r\n            {!isOnline && (\r\n                <div style={{ backgroundColor: \"red\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    You are currently offline. Some features may not be available.\r\n                </div>\r\n            )}\r\n\r\n            {isOnline && !serverAvailable && (\r\n                <div style={{ backgroundColor: \"orange\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    Server is unavailable. Using offline mode.\r\n                </div>\r\n            )}\r\n\r\n            {/* Network status banner }\r\n            {!isOnline || !serverAvailable ? (\r\n                <div className=\"offline-banner\">\r\n                    {!isOnline ? \"You are offline\" : \"Server unavailable\"} - Working locally\r\n                </div>\r\n            ) : (\r\n                <div className=\"online-banner\">Connected to server</div>\r\n            )}\r\n\r\n            <nav>\r\n                <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n                <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n                <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n            </nav>\r\n\r\n            {currentPage === \"Home\" ? (\r\n                <HomePage\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    filterStyle={filterStyle}\r\n                    setFilterStyle={setFilterStyle}\r\n                    filterCategory={filterCategory}\r\n                    setFilterCategory={setFilterCategory}\r\n                    sortPrice={sortPrice}\r\n                    setSortPrice={setSortPrice}\r\n                    styles={styles}\r\n                    categories={categories}\r\n                    isOnline={isOnline}\r\n                    serverAvailable={serverAvailable}\r\n                    videoUrl={videoUrl}\r\n                />\r\n            ) : currentPage === \"YourPage\" ? (\r\n                <YourPage\r\n                    items={items}\r\n                    handleAddItem={handleAddItem}\r\n                    handleSaveEdit={handleSaveEdit}\r\n                    handleDeleteItem={handleDeleteItem}\r\n                    handleEditItem={handleEditItem}\r\n                    newItem={newItem}\r\n                    setNewItem={setNewItem}\r\n                    editing={editing}\r\n                    setEditing={setEditing}\r\n                    styles={styles}\r\n                      categoryList={categoryList}\r\n                    isOnline={isOnline}\r\n                    serverAvailable={serverAvailable}\r\n                />\r\n            ) : (\r\n                <Charts items={items} socket={socket} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\n\n//barely bronze\n/*import React, { useEffect, useState, useCallback } from \"react\";\r\nimport HomePage from \"../pages/HomePage.js\";\r\nimport YourPage from \"../pages/YourPage.js\";\r\nimport Charts from \"../pages/Charts.js\";\r\nimport CategoryManager from \"../pages/CategoryManager.js\";\r\nimport \"../App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/categories`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch categories\");\r\n                const data = await res.json();\r\n                setCategoryList(data);\r\n            } catch (err) {\r\n                console.error(\"Error fetching categories:\", err);\r\n            }\r\n        };\r\n\r\n        fetchCategories();\r\n    }, []);\r\n\r\n\r\n    const fetchItems = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const data = await res.json();\r\n            setItems(data);\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [filterStyle, filterCategory, sortPrice]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" || currentPage === \"YourPage\") {\r\n            fetchItems();\r\n        }\r\n    }, [currentPage, fetchItems]);\r\n\r\n    useEffect(() => {\r\n        const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n        setSocket(ws);\r\n\r\n        ws.onmessage = () => {\r\n            fetchItems(); // Refresh items on any WebSocket message\r\n        };\r\n\r\n        return () => ws.close();\r\n    }, [fetchItems]);\r\n\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Validate category selection\r\n        const categoryId = parseInt(newItem.category);\r\n        if (!categoryId || isNaN(categoryId)) {\r\n            alert(\"Please select a valid category\");\r\n            return;\r\n        }\r\n\r\n        // Prepare the item data\r\n        const itemToAdd = {\r\n            name: newItem.name,\r\n            description: newItem.description,\r\n            style: newItem.style,\r\n            category_id: categoryId,  // Using category_id instead of category\r\n            price: parseFloat(newItem.price),\r\n            userAdded: true\r\n        };\r\n\r\n        try {\r\n            // 1. First create the product\r\n            const productResponse = await fetch(`${API_URL}/api/products`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer your-auth-token-if-needed\"\r\n                },\r\n                body: JSON.stringify(itemToAdd)\r\n            });\r\n\r\n            if (!productResponse.ok) {\r\n                const errorData = await productResponse.json();\r\n                throw new Error(errorData.message || \"Failed to add product\");\r\n            }\r\n\r\n            const productData = await productResponse.json();\r\n\r\n            // 2. Handle video upload if present\r\n            const videoFile = e.target.video?.files?.[0];\r\n            if (videoFile) {\r\n                const formData = new FormData();\r\n                formData.append(\"video\", videoFile);\r\n\r\n                const videoResponse = await fetch(\r\n                    `${API_URL}/api/products/${productData.id}/video`,\r\n                    {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    }\r\n                );\r\n\r\n                if (!videoResponse.ok) {\r\n                    throw new Error(\"Video upload failed\");\r\n                }\r\n\r\n                const videoData = await videoResponse.json();\r\n                productData.video = videoData.video;\r\n            }\r\n\r\n            // 3. Update UI with the new item\r\n            setItems(prev => [...prev, productData]);\r\n\r\n            // 4. Reset form\r\n            setNewItem({\r\n                name: \"\",\r\n                description: \"\",\r\n                style: \"\",\r\n                category: \"\",\r\n                price: 0\r\n            });\r\n            e.target.reset();\r\n\r\n        } catch (error) {\r\n            console.error(\"Add item error:\", error);\r\n            alert(`Failed to add item: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // In App.js - Add these handler functions\r\n    const handleDeleteItem = async (id) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/products/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (response.status === 404) {\r\n                throw new Error('Item not found');\r\n            }\r\n\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                throw new Error(error.message || 'Delete failed');\r\n            }\r\n\r\n            // Update state by filtering out the deleted item\r\n            setItems(prevItems => prevItems.filter(item => item.id !== id));\r\n\r\n        } catch (error) {\r\n            console.error('Delete failed:', error);\r\n\r\n            // Revert UI if error occurs\r\n            setItems(prev => [...prev]); // Force re-render\r\n\r\n            alert(`Delete failed: ${error.message}`);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem({\r\n            name: item.name,\r\n            description: item.description,\r\n            style: item.style,\r\n            category: item.category_id || item.category?.id,\r\n            price: item.price\r\n        });\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/products/${editItem.id}`, {\r\n                method: 'PUT',  // or 'PATCH' depending on your API\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    name: newItem.name,\r\n                    description: newItem.description,\r\n                    style: newItem.style,\r\n                    category_id: parseInt(newItem.category),\r\n                    price: parseFloat(newItem.price)\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to update item');\r\n            }\r\n\r\n            const updatedItem = await response.json();\r\n\r\n            // Update state with the edited item\r\n            setItems(prevItems =>\r\n                prevItems.map(item =>\r\n                    item.id === editItem.id ? { ...updatedItem, user_added: true } : item\r\n                )\r\n            );\r\n\r\n            // Reset form\r\n            setEditing(false);\r\n            setEditItem(null);\r\n            setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n\r\n        } catch (error) {\r\n            console.error('Error updating item:', error);\r\n            alert('Failed to update item. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {isLoading && (\r\n                <div className=\"loading-banner\">\r\n                    Loading...\r\n                </div>\r\n            )}\r\n\r\n            <nav>\r\n                <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n                <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n                <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n                <button onClick={() => setCurrentPage(\"Categories\")}>Categories</button>\r\n            </nav>\r\n\r\n            {currentPage === \"Categories\" ? (\r\n                <CategoryManager API_URL={API_URL} />):\r\n\r\n            currentPage === \"Home\" ? (\r\n                <HomePage\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    filterStyle={filterStyle}\r\n                    setFilterStyle={setFilterStyle}\r\n                    filterCategory={filterCategory}\r\n                    setFilterCategory={setFilterCategory}\r\n                    sortPrice={sortPrice}\r\n                    setSortPrice={setSortPrice}\r\n                    styles={styles}\r\n                    categories={categories}\r\n                    videoUrl={videoUrl}\r\n                />\r\n            ) : currentPage === \"YourPage\" ? (\r\n                <YourPage\r\n                    items={items}\r\n                    handleAddItem={handleAddItem}\r\n                    handleSaveEdit={handleSaveEdit}\r\n                    handleDeleteItem={handleDeleteItem}\r\n                    handleEditItem={handleEditItem}\r\n                    newItem={newItem}\r\n                    setNewItem={setNewItem}\r\n                    editing={editing}\r\n                    setEditing={setEditing}\r\n                    styles={styles}\r\n                    categoryList={categoryList}\r\n                />\r\n            ) : (\r\n                <Charts items={items} socket={socket} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport HomePage from \"../pages/HomePage.js\";\nimport YourPage from \"../pages/YourPage.js\";\nimport Charts from \"../pages/Charts.js\";\nimport CategoryManager from \"../pages/CategoryManager.js\";\nimport LoginPage from \"../pages/LogIn.js\"; // import login page\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:4000\";\nconst App = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filterStyle, setFilterStyle] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"\");\n  const [sortPrice, setSortPrice] = useState(\"\");\n  const [newItem, setNewItem] = useState({\n    name: \"\",\n    description: \"\",\n    style: \"\",\n    category: \"\",\n    price: 0\n  });\n  const [editing, setEditing] = useState(false);\n  const [currentPage, setCurrentPage] = useState(\"Home\");\n  const [editItem, setEditItem] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const [videoUrl, setVideoUrl] = useState(null);\n  const [categoryList, setCategoryList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\n  const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\n\n  // Check token on mount\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    setIsLoggedIn(!!token);\n  }, []);\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    setIsLoggedIn(false);\n    setCurrentPage(\"Home\");\n  };\n  const handleLoginSuccess = () => {\n    setIsLoggedIn(true);\n  };\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const res = await fetch(`${API_URL}/api/categories`);\n        if (!res.ok) throw new Error(\"Failed to fetch categories\");\n        const data = await res.json();\n        setCategoryList(data);\n      } catch (err) {\n        console.error(\"Error fetching categories:\", err);\n      }\n    };\n    fetchCategories();\n  }, []);\n  const fetchItems = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const query = new URLSearchParams();\n      if (filterStyle) query.append(\"style\", filterStyle);\n      if (filterCategory) query.append(\"category\", filterCategory);\n      if (sortPrice) query.append(\"sortPrice\", sortPrice);\n      const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\n      const data = await res.json();\n      setItems(data);\n    } catch (err) {\n      console.error(\"Failed to fetch items:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [filterStyle, filterCategory, sortPrice]);\n  useEffect(() => {\n    if (currentPage === \"Home\" || currentPage === \"YourPage\") {\n      fetchItems();\n    }\n  }, [currentPage, fetchItems]);\n  useEffect(() => {\n    const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\n    setSocket(ws);\n    ws.onmessage = () => {\n      fetchItems();\n    };\n    return () => ws.close();\n  }, [fetchItems]);\n  const handleAddItem = async e => {\n    e.preventDefault();\n    const categoryId = parseInt(newItem.category);\n    if (!categoryId || isNaN(categoryId)) {\n      alert(\"Please select a valid category\");\n      return;\n    }\n    const itemToAdd = {\n      name: newItem.name,\n      description: newItem.description,\n      style: newItem.style,\n      category_id: categoryId,\n      price: parseFloat(newItem.price),\n      userAdded: true\n    };\n    try {\n      var _e$target$video, _e$target$video$files;\n      const token = localStorage.getItem(\"token\");\n      const productResponse = await fetch(`${API_URL}/api/products`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify(itemToAdd)\n      });\n      if (!productResponse.ok) {\n        const errorData = await productResponse.json();\n        throw new Error(errorData.message || \"Failed to add product\");\n      }\n      const productData = await productResponse.json();\n      const videoFile = (_e$target$video = e.target.video) === null || _e$target$video === void 0 ? void 0 : (_e$target$video$files = _e$target$video.files) === null || _e$target$video$files === void 0 ? void 0 : _e$target$video$files[0];\n      if (videoFile) {\n        const formData = new FormData();\n        formData.append(\"video\", videoFile);\n        const videoResponse = await fetch(`${API_URL}/api/products/${productData.id}/video`, {\n          method: \"POST\",\n          body: formData\n        });\n        if (!videoResponse.ok) throw new Error(\"Video upload failed\");\n        const videoData = await videoResponse.json();\n        productData.video = videoData.video;\n      }\n      setItems(prev => [...prev, productData]);\n      setNewItem({\n        name: \"\",\n        description: \"\",\n        style: \"\",\n        category: \"\",\n        price: 0\n      });\n      e.target.reset();\n    } catch (error) {\n      console.error(\"Add item error:\", error);\n      alert(`Failed to add item: ${error.message}`);\n    }\n  };\n  const handleDeleteItem = async id => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`${API_URL}/api/products/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.status === 404) throw new Error('Item not found');\n      if (!response.ok) throw new Error('Delete failed');\n      setItems(prevItems => prevItems.filter(item => item.id !== id));\n    } catch (error) {\n      console.error('Delete failed:', error);\n      alert(`Delete failed: ${error.message}`);\n    }\n  };\n  const handleEditItem = item => {\n    var _item$category;\n    setEditing(true);\n    setEditItem(item);\n    setNewItem({\n      name: item.name,\n      description: item.description,\n      style: item.style,\n      category: item.category_id || ((_item$category = item.category) === null || _item$category === void 0 ? void 0 : _item$category.id),\n      price: item.price\n    });\n  };\n  const handleSaveEdit = async e => {\n    e.preventDefault();\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`${API_URL}/api/products/${editItem.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: newItem.name,\n          description: newItem.description,\n          style: newItem.style,\n          category_id: parseInt(newItem.category),\n          price: parseFloat(newItem.price)\n        })\n      });\n      if (!response.ok) throw new Error('Failed to update item');\n      const updatedItem = await response.json();\n      setItems(prevItems => prevItems.map(item => item.id === editItem.id ? {\n        ...updatedItem,\n        user_added: true\n      } : item));\n      setEditing(false);\n      setEditItem(null);\n      setNewItem({\n        name: \"\",\n        description: \"\",\n        style: \"\",\n        category: \"\",\n        price: 0\n      });\n    } catch (error) {\n      console.error('Error updating item:', error);\n      alert('Failed to update item. Please try again.');\n    }\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1330,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-banner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1335,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(\"Home\"),\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(\"YourPage\"),\n        children: \"Your Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(\"Charts\"),\n        children: \"Charts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentPage(\"Categories\"),\n        children: \"Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1342,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1337,\n      columnNumber: 13\n    }, this), currentPage === \"Categories\" ? /*#__PURE__*/_jsxDEV(CategoryManager, {\n      API_URL: API_URL,\n      token: localStorage.getItem(\"token\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 17\n    }, this) : currentPage === \"Home\" ? /*#__PURE__*/_jsxDEV(HomePage, {\n      items: items,\n      setItems: setItems,\n      search: search,\n      setSearch: setSearch,\n      filterStyle: filterStyle,\n      setFilterStyle: setFilterStyle,\n      filterCategory: filterCategory,\n      setFilterCategory: setFilterCategory,\n      sortPrice: sortPrice,\n      setSortPrice: setSortPrice,\n      styles: styles,\n      categories: categories,\n      videoUrl: videoUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1349,\n      columnNumber: 17\n    }, this) : currentPage === \"YourPage\" ? /*#__PURE__*/_jsxDEV(YourPage, {\n      items: items,\n      handleAddItem: handleAddItem,\n      handleSaveEdit: handleSaveEdit,\n      handleDeleteItem: handleDeleteItem,\n      handleEditItem: handleEditItem,\n      newItem: newItem,\n      setNewItem: setNewItem,\n      editing: editing,\n      setEditing: setEditing,\n      styles: styles,\n      categoryList: categoryList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1365,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Charts, {\n      items: items,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1379,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1334,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"o1qxAxrgCzneTjFv+WimbX5V0qo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","HomePage","YourPage","Charts","CategoryManager","LoginPage","jsxDEV","_jsxDEV","API_URL","App","_s","items","setItems","search","setSearch","filterStyle","setFilterStyle","filterCategory","setFilterCategory","sortPrice","setSortPrice","newItem","setNewItem","name","description","style","category","price","editing","setEditing","currentPage","setCurrentPage","editItem","setEditItem","socket","setSocket","videoUrl","setVideoUrl","categoryList","setCategoryList","isLoading","setIsLoading","isLoggedIn","setIsLoggedIn","styles","categories","token","localStorage","getItem","handleLogout","removeItem","handleLoginSuccess","fetchCategories","res","fetch","ok","Error","data","json","err","console","error","fetchItems","query","URLSearchParams","append","toString","ws","WebSocket","split","onmessage","close","handleAddItem","e","preventDefault","categoryId","parseInt","isNaN","alert","itemToAdd","category_id","parseFloat","userAdded","_e$target$video","_e$target$video$files","productResponse","method","headers","body","JSON","stringify","errorData","message","productData","videoFile","target","video","files","formData","FormData","videoResponse","id","videoData","prev","reset","handleDeleteItem","response","status","prevItems","filter","item","handleEditItem","_item$category","handleSaveEdit","updatedItem","map","user_added","onLoginSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","_c","$RefreshReg$"],"sources":["C:/Users/labon/jewelry-frontend/jewelry-website/frontEnd/src/pages/App.js"],"sourcesContent":["//!!!!silver + infinitescroll + offline setup\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { syncQueue, getLocalItems, queueOperation } from './offlineQueue';\r\nimport HomePage from \"./HomePage\";\r\nimport YourPage from \"./YourPage\";\r\nimport Charts from \"./Charts\";\r\nimport \"./App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const [serverAvailable, setServerAvailable] = useState(true);\r\n    const [videoBuffer, setVideoBuffer] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!videoBuffer) return; // Prevent error if undefined\r\n        const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n        const url = URL.createObjectURL(blob);\r\n        setVideoUrl(url);\r\n\r\n        // Clean up the URL object when component unmounts or buffer changes\r\n        return () => URL.revokeObjectURL(url);\r\n    }, [videoBuffer]);\r\n\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        if (videoBuffer) {\r\n            const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n            const url = URL.createObjectURL(blob);\r\n            setVideoUrl(url);\r\n\r\n            return () => URL.revokeObjectURL(url); // cleanup on unmount or change\r\n        }\r\n    }, [videoBuffer]);\r\n\r\n\r\n    // Network status detection and server check\r\n    useEffect(() => {\r\n        const updateOnlineStatus = () => {\r\n            const newStatus = navigator.onLine;\r\n            setIsOnline(newStatus);\r\n            if (newStatus) checkServerAvailability(); // Check server immediately when coming online\r\n        };\r\n\r\n        const checkServerAvailability = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/health`, {\r\n                    signal: AbortSignal.timeout(3000) // Timeout after 3 seconds\r\n                });\r\n                setServerAvailable(res.ok);\r\n            } catch (err) {\r\n                setServerAvailable(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n\r\n        // Initial checks\r\n        updateOnlineStatus(); // This will check both network and server status\r\n        const interval = setInterval(checkServerAvailability, 10000);\r\n\r\n        return () => {\r\n            window.removeEventListener('online', updateOnlineStatus);\r\n            window.removeEventListener('offline', updateOnlineStatus);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkInternetConnection = async () => {\r\n            try {\r\n                // Pinging a reliable public URL (can use your server or a public site)\r\n                const onlineCheck = await fetch(\"https://www.google.com/favicon.ico\", {\r\n                    method: \"HEAD\",\r\n                    mode: \"no-cors\"\r\n                });\r\n\r\n                // If no error is thrown, assume online\r\n                setIsOnline(true);\r\n            } catch (err) {\r\n                console.warn(\"No internet connection detected\");\r\n                setIsOnline(false);\r\n            }\r\n        };\r\n\r\n        // Run once at start and then every 10 seconds\r\n        checkInternetConnection();\r\n        const interval = setInterval(checkInternetConnection, 10000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n     // WebSocket connection - only when properly online\r\n    useEffect(() => {\r\n        if (isOnline && serverAvailable) {\r\n            const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n            setSocket(ws);\r\n\r\n            ws.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                console.log('WebSocket message received:', message);\r\n\r\n                if (isOnline && serverAvailable) {\r\n                    switch (message.type) {\r\n                        case 'INITIAL_DATA':\r\n                            setItems(prev => [...message.data, ...getLocalItems()]);\r\n                            break;\r\n                        case 'NEW_AUTO_ITEM':\r\n                            setItems(prev => [...prev, message.data]);\r\n                            break;\r\n                        case 'NEW_ITEM':\r\n                        case 'UPDATED_ITEM':\r\n                        case 'DELETED_ITEM':\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return () => ws.close();\r\n        }\r\n    }, [isOnline, serverAvailable]);\r\n\r\n    // Fetch items with offline fallback\r\n    const fetchItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/items?${query.toString()}`);\r\n            const data = await res.json();\r\n            setItems([...data, ...getLocalItems()]);\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n            setItems(getLocalItems());\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchItems();\r\n    }, [filterStyle, filterCategory, sortPrice]);\r\n\r\n    // CRUD Operations with proper offline handling\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n        const itemToAdd = { ...newItem, userAdded: true };\r\n        const operation = { type: 'POST', data: itemToAdd };\r\n\r\n        const videoFile = e.target.video?.files?.[0]; // from form input\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/items`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(itemToAdd),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                const data = await res.json();\r\n\r\n                if (videoFile) {\r\n                    const formData = new FormData();\r\n                    formData.append(\"video\", videoFile);\r\n                    const videoRes = await fetch(`${API_URL}/api/products/${data.id}/video`, {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    });\r\n                    const videoData = await videoRes.json();\r\n                    data.video = videoData.video;\r\n                    data.videoUrl = videoData.videoUrl;\r\n                }\r\n\r\n                setItems(prev => [...prev, data]);\r\n            } catch (err) {\r\n                console.error(\"Failed to add item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile ? videoFile.name : null }]); }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile ? videoFile.name : null }]);   }\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem(item);\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n        const operation = { type: 'PATCH', id: editItem.id, data: newItem };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/items/${editItem.id}`, {\r\n                    method: \"PATCH\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(newItem),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error('Failed to update item');\r\n                const updatedItem = await res.json();\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? updatedItem : item));\r\n            } catch (err) {\r\n                console.error(\"Failed to update item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n        }\r\n        setEditing(false);\r\n        setEditItem(null);\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleDeleteItem = async (id) => {\r\n        const operation = { type: 'DELETE', id };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                await fetch(`${API_URL}/items/${id}`, {\r\n                    method: 'DELETE',\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            } catch (err) {\r\n                console.error(\"Failed to delete item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.filter(item => item.id !== id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n\r\n            {!isOnline && (\r\n                <div style={{ backgroundColor: \"red\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    You are currently offline. Some features may not be available.\r\n                </div>\r\n            )}\r\n\r\n            {isOnline && !serverAvailable && (\r\n                <div style={{ backgroundColor: \"orange\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    Server is unavailable. Using offline mode.\r\n                </div>\r\n            )}\r\n\r\n            {/* Network status banner }\r\n{\r\n    !isOnline || !serverAvailable ? (\r\n        <div className=\"offline-banner\">\r\n            {!isOnline ? \"You are offline\" : \"Server unavailable\"} - Working locally\r\n        </div>\r\n    ) : (\r\n    <div className=\"online-banner\">Connected to server</div>\r\n)\r\n}\r\n\r\n<nav>\r\n    <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n    <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n    <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n</nav>\r\n\r\n{\r\n    currentPage === \"Home\" ? (\r\n        <HomePage\r\n            items={items}\r\n            setItems={setItems}\r\n            search={search}\r\n            setSearch={setSearch}\r\n            filterStyle={filterStyle}\r\n            setFilterStyle={setFilterStyle}\r\n            filterCategory={filterCategory}\r\n            setFilterCategory={setFilterCategory}\r\n            sortPrice={sortPrice}\r\n            setSortPrice={setSortPrice}\r\n            styles={styles}\r\n            categories={categories}\r\n            isOnline={isOnline}\r\n            serverAvailable={serverAvailable}\r\n            videoUrl={videoUrl}\r\n        />\r\n    ) : currentPage === \"YourPage\" ? (\r\n        <YourPage\r\n            items={items}\r\n            handleAddItem={handleAddItem}\r\n            handleSaveEdit={handleSaveEdit}\r\n            handleDeleteItem={handleDeleteItem}\r\n            handleEditItem={handleEditItem}\r\n            newItem={newItem}\r\n            setNewItem={setNewItem}\r\n            editing={editing}\r\n            setEditing={setEditing}\r\n            styles={styles}\r\n            categories={categories}\r\n            isOnline={isOnline}\r\n            serverAvailable={serverAvailable}\r\n        />\r\n    ) : (\r\n    <Charts items={items} socket={socket} />\r\n)\r\n}\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default App; */\r\n\r\n/*import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport { syncQueue, getLocalItems, queueOperation } from '../utils/offlineQueue.js';\r\nimport HomePage from \"../pages/HomePage.js\";\r\nimport YourPage from \"../pages/YourPage.js\";\r\nimport Charts from \"../pages/Charts.js\";\r\nimport \"../App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n    const [serverAvailable, setServerAvailable] = useState(true);\r\n    const [videoBuffer, setVideoBuffer] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const localItems = getLocalItems();\r\n            if (items.length < 4 && localItems.length > 0) {\r\n                const existingIds = new Set(items.map(item => item.id));\r\n                const newItems = localItems.filter(item => !existingIds.has(item.id));\r\n                if (newItems.length > 0) {\r\n                    setItems(prev => [...prev, ...newItems]);\r\n                }\r\n            }\r\n        }, 3000); // Check every 3 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, [items]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!videoBuffer) return; // Prevent error if undefined\r\n        const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n        const url = URL.createObjectURL(blob);\r\n        setVideoUrl(url);\r\n\r\n        // Clean up the URL object when component unmounts or buffer changes\r\n        return () => URL.revokeObjectURL(url);\r\n    }, [videoBuffer]);\r\n\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        if (videoBuffer) {\r\n            const blob = new Blob([videoBuffer], { type: 'video/mp4' });\r\n            const url = URL.createObjectURL(blob);\r\n            setVideoUrl(url);\r\n\r\n            return () => URL.revokeObjectURL(url); // cleanup on unmount or change\r\n        }\r\n    }, [videoBuffer]);\r\n\r\n    const loadItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const serverItems = await res.json();\r\n\r\n            const localItems = getLocalItems();\r\n\r\n            // Deduplicate by ID (localItems override serverItems for same ID)\r\n            const map = new Map();\r\n\r\n            serverItems.forEach(item => map.set(item.id, item));\r\n            localItems.forEach(item => map.set(item.id, item));\r\n\r\n            setItems(Array.from(map.values()));\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch items:\", error);\r\n\r\n            // fallback to local items only\r\n            const localItems = getLocalItems();\r\n            setItems(localItems);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" && isOnline && serverAvailable) {\r\n            loadItems();\r\n        }\r\n    }, [currentPage, filterStyle, filterCategory, sortPrice, isOnline, serverAvailable]);\r\n\r\n\r\n    // Network status detection and server check\r\n    useEffect(() => {\r\n        const updateOnlineStatus = () => {\r\n            const newStatus = navigator.onLine;\r\n            setIsOnline(newStatus);\r\n            if (newStatus) checkServerAvailability(); // Check server immediately when coming online\r\n        };\r\n\r\n        const checkServerAvailability = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/health`, {\r\n                    signal: AbortSignal.timeout(3000) // Timeout after 3 seconds\r\n                });\r\n                setServerAvailable(res.ok);\r\n            } catch (err) {\r\n                setServerAvailable(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n\r\n        // Initial checks\r\n        updateOnlineStatus(); // This will check both network and server status\r\n        const interval = setInterval(checkServerAvailability, 10000);\r\n\r\n        return () => {\r\n            window.removeEventListener('online', updateOnlineStatus);\r\n            window.removeEventListener('offline', updateOnlineStatus);\r\n            clearInterval(interval);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const checkInternetConnection = async () => {\r\n            try {\r\n                // Pinging a reliable public URL (can use your server or a public site)\r\n                const onlineCheck = await fetch(\"https://www.google.com/favicon.ico\", {\r\n                    method: \"HEAD\",\r\n                    mode: \"no-cors\"\r\n                });\r\n\r\n                // If no error is thrown, assume online\r\n                setIsOnline(true);\r\n            } catch (err) {\r\n                console.warn(\"No internet connection detected\");\r\n                setIsOnline(false);\r\n            }\r\n        };\r\n\r\n        // Run once at start and then every 10 seconds\r\n        checkInternetConnection();\r\n        const interval = setInterval(checkInternetConnection, 10000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            if (!isOnline || !serverAvailable) return;\r\n\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/categories`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch categories\");\r\n                const data = await res.json();\r\n                setCategoryList(data);\r\n            } catch (err) {\r\n                console.error(\"Error fetching categories:\", err);\r\n            }\r\n        };\r\n\r\n        fetchCategories();\r\n    }, [isOnline, serverAvailable]);\r\n\r\n\r\n     // WebSocket connection - only when properly online\r\n    useEffect(() => {\r\n        if (isOnline && serverAvailable) {\r\n            syncQueue();\r\n            const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n            setSocket(ws);\r\n\r\n            ws.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                console.log('WebSocket message received:', message);\r\n\r\n                if (isOnline && serverAvailable) {\r\n                    switch (message.type) {\r\n                        case 'INITIAL_DATA':\r\n                            setItems(prev => {\r\n                                const existingIds = new Set(prev.map(item => item.id));\r\n                                const newItems = message.data.filter(item => !existingIds.has(item.id));\r\n                                return [...prev, ...newItems, ...getLocalItems()];\r\n                            });\r\n                            break;\r\n                        case 'NEW_AUTO_ITEM':\r\n                            setItems(prev => [...prev, message.data]);\r\n                            break;\r\n                        case 'NEW_ITEM':\r\n                        case 'UPDATED_ITEM':\r\n                        case 'DELETED_ITEM':\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return () => ws.close();\r\n        }\r\n    }, [isOnline, serverAvailable]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" || currentPage === \"YourPage\") {\r\n            const localItems = getLocalItems();\r\n            setItems(prev => {\r\n                const existingIds = new Set(prev.map(item => item.id));\r\n                const merged = [...prev, ...localItems.filter(item => !existingIds.has(item.id))];\r\n                return merged;\r\n            });\r\n        }\r\n    }, [currentPage]);\r\n\r\n\r\n    // Fetch items with offline fallback\r\n    const fetchItems = async () => {\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const serverItems = await res.json();\r\n\r\n            setItems(prev => {\r\n                const localItems = getLocalItems();\r\n                const existingIds = new Set(localItems.map(item => item.id));\r\n                // Filter out local items from serverItems to avoid duplicates\r\n                const filteredServerItems = serverItems.filter(item => !existingIds.has(item.id));\r\n                return [...filteredServerItems, ...localItems];\r\n            });\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n            const localItems = getLocalItems();\r\n            setItems(localItems);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" && isOnline && serverAvailable) {\r\n            fetchItems();\r\n        }\r\n    }, [filterStyle, filterCategory, sortPrice, currentPage, isOnline, serverAvailable]);\r\n\r\n\r\n    // CRUD Operations with proper offline handling\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const categoryId = parseInt(newItem.category);\r\n        if (!categoryId || isNaN(categoryId)) {\r\n            alert(\"Please select a valid category\");\r\n            return;\r\n        }\r\n\r\n        const itemToAdd = {\r\n            ...newItem,\r\n            userAdded: true,\r\n            category_id: categoryId,\r\n        };\r\n\r\n        delete itemToAdd.category; // Clean up any leftover string-based field\r\n\r\n        const operation = { type: 'POST', data: itemToAdd };\r\n        const videoFile = e.target.video?.files?.[0];\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/products`, {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify(itemToAdd),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error(\"Failed to add product\");\r\n                const data = await res.json();\r\n\r\n                if (videoFile) {\r\n                    const formData = new FormData();\r\n                    formData.append(\"video\", videoFile);\r\n                    const videoRes = await fetch(`${API_URL}/api/products/${data.id}/video`, {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    });\r\n                    const videoData = await videoRes.json();\r\n                    data.video = videoData.video;\r\n                    data.videoUrl = videoData.videoUrl;\r\n                }\r\n\r\n                setItems(prev => [...prev, data]);\r\n            } catch (err) {\r\n                console.error(\"Failed to add item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile?.name || null }]);\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => [...prev, { ...itemToAdd, id: `temp-${Date.now()}`, video: videoFile?.name || null }]);\r\n        }\r\n\r\n        // Reset form\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem(item);\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n        const operation = { type: 'PATCH', id: editItem.id, data: newItem };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/products/${editItem.id}`, {\r\n                    method: \"PATCH\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer dummy-token\"\r\n                    },\r\n                    body: JSON.stringify(newItem),\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n\r\n                if (!res.ok) throw new Error('Failed to update item');\r\n                const updatedItem = await res.json();\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? updatedItem : item));\r\n            } catch (err) {\r\n                console.error(\"Failed to update item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.map(item => item.id === editItem.id ? { ...item, ...newItem } : item));\r\n        }\r\n        setEditing(false);\r\n        setEditItem(null);\r\n        setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    };\r\n\r\n    const handleDeleteItem = async (id) => {\r\n        const operation = { type: 'DELETE', id };\r\n\r\n        if (isOnline && serverAvailable) {\r\n            try {\r\n                await fetch(`${API_URL}/api/products/${id}`, {\r\n                    method: 'DELETE',\r\n                    signal: AbortSignal.timeout(5000)\r\n                });\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            } catch (err) {\r\n                console.error(\"Failed to delete item online, falling back to offline:\", err);\r\n                queueOperation(operation);\r\n                setItems(prev => prev.filter(item => item.id !== id));\r\n            }\r\n        } else {\r\n            queueOperation(operation);\r\n            setItems(prev => prev.filter(item => item.id !== id));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n\r\n            {!isOnline && (\r\n                <div style={{ backgroundColor: \"red\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    You are currently offline. Some features may not be available.\r\n                </div>\r\n            )}\r\n\r\n            {isOnline && !serverAvailable && (\r\n                <div style={{ backgroundColor: \"orange\", color: \"white\", padding: \"0.5rem\", textAlign: \"center\" }}>\r\n                    Server is unavailable. Using offline mode.\r\n                </div>\r\n            )}\r\n\r\n            {/* Network status banner }\r\n            {!isOnline || !serverAvailable ? (\r\n                <div className=\"offline-banner\">\r\n                    {!isOnline ? \"You are offline\" : \"Server unavailable\"} - Working locally\r\n                </div>\r\n            ) : (\r\n                <div className=\"online-banner\">Connected to server</div>\r\n            )}\r\n\r\n            <nav>\r\n                <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n                <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n                <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n            </nav>\r\n\r\n            {currentPage === \"Home\" ? (\r\n                <HomePage\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    filterStyle={filterStyle}\r\n                    setFilterStyle={setFilterStyle}\r\n                    filterCategory={filterCategory}\r\n                    setFilterCategory={setFilterCategory}\r\n                    sortPrice={sortPrice}\r\n                    setSortPrice={setSortPrice}\r\n                    styles={styles}\r\n                    categories={categories}\r\n                    isOnline={isOnline}\r\n                    serverAvailable={serverAvailable}\r\n                    videoUrl={videoUrl}\r\n                />\r\n            ) : currentPage === \"YourPage\" ? (\r\n                <YourPage\r\n                    items={items}\r\n                    handleAddItem={handleAddItem}\r\n                    handleSaveEdit={handleSaveEdit}\r\n                    handleDeleteItem={handleDeleteItem}\r\n                    handleEditItem={handleEditItem}\r\n                    newItem={newItem}\r\n                    setNewItem={setNewItem}\r\n                    editing={editing}\r\n                    setEditing={setEditing}\r\n                    styles={styles}\r\n                      categoryList={categoryList}\r\n                    isOnline={isOnline}\r\n                    serverAvailable={serverAvailable}\r\n                />\r\n            ) : (\r\n                <Charts items={items} socket={socket} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\r\n\r\n\r\n\r\n\r\n//barely bronze\r\n/*import React, { useEffect, useState, useCallback } from \"react\";\r\nimport HomePage from \"../pages/HomePage.js\";\r\nimport YourPage from \"../pages/YourPage.js\";\r\nimport Charts from \"../pages/Charts.js\";\r\nimport CategoryManager from \"../pages/CategoryManager.js\";\r\nimport \"../App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/categories`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch categories\");\r\n                const data = await res.json();\r\n                setCategoryList(data);\r\n            } catch (err) {\r\n                console.error(\"Error fetching categories:\", err);\r\n            }\r\n        };\r\n\r\n        fetchCategories();\r\n    }, []);\r\n\r\n\r\n    const fetchItems = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const data = await res.json();\r\n            setItems(data);\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [filterStyle, filterCategory, sortPrice]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" || currentPage === \"YourPage\") {\r\n            fetchItems();\r\n        }\r\n    }, [currentPage, fetchItems]);\r\n\r\n    useEffect(() => {\r\n        const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n        setSocket(ws);\r\n\r\n        ws.onmessage = () => {\r\n            fetchItems(); // Refresh items on any WebSocket message\r\n        };\r\n\r\n        return () => ws.close();\r\n    }, [fetchItems]);\r\n\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Validate category selection\r\n        const categoryId = parseInt(newItem.category);\r\n        if (!categoryId || isNaN(categoryId)) {\r\n            alert(\"Please select a valid category\");\r\n            return;\r\n        }\r\n\r\n        // Prepare the item data\r\n        const itemToAdd = {\r\n            name: newItem.name,\r\n            description: newItem.description,\r\n            style: newItem.style,\r\n            category_id: categoryId,  // Using category_id instead of category\r\n            price: parseFloat(newItem.price),\r\n            userAdded: true\r\n        };\r\n\r\n        try {\r\n            // 1. First create the product\r\n            const productResponse = await fetch(`${API_URL}/api/products`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer your-auth-token-if-needed\"\r\n                },\r\n                body: JSON.stringify(itemToAdd)\r\n            });\r\n\r\n            if (!productResponse.ok) {\r\n                const errorData = await productResponse.json();\r\n                throw new Error(errorData.message || \"Failed to add product\");\r\n            }\r\n\r\n            const productData = await productResponse.json();\r\n\r\n            // 2. Handle video upload if present\r\n            const videoFile = e.target.video?.files?.[0];\r\n            if (videoFile) {\r\n                const formData = new FormData();\r\n                formData.append(\"video\", videoFile);\r\n\r\n                const videoResponse = await fetch(\r\n                    `${API_URL}/api/products/${productData.id}/video`,\r\n                    {\r\n                        method: \"POST\",\r\n                        body: formData\r\n                    }\r\n                );\r\n\r\n                if (!videoResponse.ok) {\r\n                    throw new Error(\"Video upload failed\");\r\n                }\r\n\r\n                const videoData = await videoResponse.json();\r\n                productData.video = videoData.video;\r\n            }\r\n\r\n            // 3. Update UI with the new item\r\n            setItems(prev => [...prev, productData]);\r\n\r\n            // 4. Reset form\r\n            setNewItem({\r\n                name: \"\",\r\n                description: \"\",\r\n                style: \"\",\r\n                category: \"\",\r\n                price: 0\r\n            });\r\n            e.target.reset();\r\n\r\n        } catch (error) {\r\n            console.error(\"Add item error:\", error);\r\n            alert(`Failed to add item: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    // In App.js - Add these handler functions\r\n    const handleDeleteItem = async (id) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/products/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            if (response.status === 404) {\r\n                throw new Error('Item not found');\r\n            }\r\n\r\n            if (!response.ok) {\r\n                const error = await response.json();\r\n                throw new Error(error.message || 'Delete failed');\r\n            }\r\n\r\n            // Update state by filtering out the deleted item\r\n            setItems(prevItems => prevItems.filter(item => item.id !== id));\r\n\r\n        } catch (error) {\r\n            console.error('Delete failed:', error);\r\n\r\n            // Revert UI if error occurs\r\n            setItems(prev => [...prev]); // Force re-render\r\n\r\n            alert(`Delete failed: ${error.message}`);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem({\r\n            name: item.name,\r\n            description: item.description,\r\n            style: item.style,\r\n            category: item.category_id || item.category?.id,\r\n            price: item.price\r\n        });\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await fetch(`${API_URL}/api/products/${editItem.id}`, {\r\n                method: 'PUT',  // or 'PATCH' depending on your API\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    name: newItem.name,\r\n                    description: newItem.description,\r\n                    style: newItem.style,\r\n                    category_id: parseInt(newItem.category),\r\n                    price: parseFloat(newItem.price)\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to update item');\r\n            }\r\n\r\n            const updatedItem = await response.json();\r\n\r\n            // Update state with the edited item\r\n            setItems(prevItems =>\r\n                prevItems.map(item =>\r\n                    item.id === editItem.id ? { ...updatedItem, user_added: true } : item\r\n                )\r\n            );\r\n\r\n            // Reset form\r\n            setEditing(false);\r\n            setEditItem(null);\r\n            setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n\r\n        } catch (error) {\r\n            console.error('Error updating item:', error);\r\n            alert('Failed to update item. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {isLoading && (\r\n                <div className=\"loading-banner\">\r\n                    Loading...\r\n                </div>\r\n            )}\r\n\r\n            <nav>\r\n                <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n                <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n                <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n                <button onClick={() => setCurrentPage(\"Categories\")}>Categories</button>\r\n            </nav>\r\n\r\n            {currentPage === \"Categories\" ? (\r\n                <CategoryManager API_URL={API_URL} />):\r\n\r\n            currentPage === \"Home\" ? (\r\n                <HomePage\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    filterStyle={filterStyle}\r\n                    setFilterStyle={setFilterStyle}\r\n                    filterCategory={filterCategory}\r\n                    setFilterCategory={setFilterCategory}\r\n                    sortPrice={sortPrice}\r\n                    setSortPrice={setSortPrice}\r\n                    styles={styles}\r\n                    categories={categories}\r\n                    videoUrl={videoUrl}\r\n                />\r\n            ) : currentPage === \"YourPage\" ? (\r\n                <YourPage\r\n                    items={items}\r\n                    handleAddItem={handleAddItem}\r\n                    handleSaveEdit={handleSaveEdit}\r\n                    handleDeleteItem={handleDeleteItem}\r\n                    handleEditItem={handleEditItem}\r\n                    newItem={newItem}\r\n                    setNewItem={setNewItem}\r\n                    editing={editing}\r\n                    setEditing={setEditing}\r\n                    styles={styles}\r\n                    categoryList={categoryList}\r\n                />\r\n            ) : (\r\n                <Charts items={items} socket={socket} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;*/\r\n\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport HomePage from \"../pages/HomePage.js\";\r\nimport YourPage from \"../pages/YourPage.js\";\r\nimport Charts from \"../pages/Charts.js\";\r\nimport CategoryManager from \"../pages/CategoryManager.js\";\r\nimport LoginPage from \"../pages/LogIn.js\"; // import login page\r\nimport \"../App.css\";\r\n\r\nconst API_URL = \"http://localhost:4000\";\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [filterStyle, setFilterStyle] = useState(\"\");\r\n    const [filterCategory, setFilterCategory] = useState(\"\");\r\n    const [sortPrice, setSortPrice] = useState(\"\");\r\n    const [newItem, setNewItem] = useState({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n    const [editing, setEditing] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(\"Home\");\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [socket, setSocket] = useState(null);\r\n    const [videoUrl, setVideoUrl] = useState(null);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    // Check token on mount\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        setIsLoggedIn(!!token);\r\n    }, []);\r\n\r\n    const handleLogout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        setIsLoggedIn(false);\r\n        setCurrentPage(\"Home\");\r\n    };\r\n\r\n    const handleLoginSuccess = () => {\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchCategories = async () => {\r\n            try {\r\n                const res = await fetch(`${API_URL}/api/categories`);\r\n                if (!res.ok) throw new Error(\"Failed to fetch categories\");\r\n                const data = await res.json();\r\n                setCategoryList(data);\r\n            } catch (err) {\r\n                console.error(\"Error fetching categories:\", err);\r\n            }\r\n        };\r\n\r\n        fetchCategories();\r\n    }, []);\r\n\r\n    const fetchItems = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const query = new URLSearchParams();\r\n            if (filterStyle) query.append(\"style\", filterStyle);\r\n            if (filterCategory) query.append(\"category\", filterCategory);\r\n            if (sortPrice) query.append(\"sortPrice\", sortPrice);\r\n\r\n            const res = await fetch(`${API_URL}/api/products?${query.toString()}`);\r\n            const data = await res.json();\r\n            setItems(data);\r\n        } catch (err) {\r\n            console.error(\"Failed to fetch items:\", err);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [filterStyle, filterCategory, sortPrice]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === \"Home\" || currentPage === \"YourPage\") {\r\n            fetchItems();\r\n        }\r\n    }, [currentPage, fetchItems]);\r\n\r\n    useEffect(() => {\r\n        const ws = new WebSocket(`ws://${API_URL.split('//')[1]}`);\r\n        setSocket(ws);\r\n\r\n        ws.onmessage = () => {\r\n            fetchItems();\r\n        };\r\n\r\n        return () => ws.close();\r\n    }, [fetchItems]);\r\n\r\n    const handleAddItem = async (e) => {\r\n        e.preventDefault();\r\n        const categoryId = parseInt(newItem.category);\r\n        if (!categoryId || isNaN(categoryId)) {\r\n            alert(\"Please select a valid category\");\r\n            return;\r\n        }\r\n\r\n        const itemToAdd = {\r\n            name: newItem.name,\r\n            description: newItem.description,\r\n            style: newItem.style,\r\n            category_id: categoryId,\r\n            price: parseFloat(newItem.price),\r\n            userAdded: true\r\n        };\r\n\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n\r\n            const productResponse = await fetch(`${API_URL}/api/products`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(itemToAdd)\r\n            });\r\n\r\n            if (!productResponse.ok) {\r\n                const errorData = await productResponse.json();\r\n                throw new Error(errorData.message || \"Failed to add product\");\r\n            }\r\n\r\n            const productData = await productResponse.json();\r\n\r\n            const videoFile = e.target.video?.files?.[0];\r\n            if (videoFile) {\r\n                const formData = new FormData();\r\n                formData.append(\"video\", videoFile);\r\n\r\n                const videoResponse = await fetch(\r\n                    `${API_URL}/api/products/${productData.id}/video`,\r\n                    { method: \"POST\", body: formData }\r\n                );\r\n\r\n                if (!videoResponse.ok) throw new Error(\"Video upload failed\");\r\n\r\n                const videoData = await videoResponse.json();\r\n                productData.video = videoData.video;\r\n            }\r\n\r\n            setItems(prev => [...prev, productData]);\r\n            setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n            e.target.reset();\r\n\r\n        } catch (error) {\r\n            console.error(\"Add item error:\", error);\r\n            alert(`Failed to add item: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleDeleteItem = async (id) => {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const response = await fetch(`${API_URL}/api/products/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 404) throw new Error('Item not found');\r\n            if (!response.ok) throw new Error('Delete failed');\r\n\r\n            setItems(prevItems => prevItems.filter(item => item.id !== id));\r\n\r\n        } catch (error) {\r\n            console.error('Delete failed:', error);\r\n            alert(`Delete failed: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    const handleEditItem = (item) => {\r\n        setEditing(true);\r\n        setEditItem(item);\r\n        setNewItem({\r\n            name: item.name,\r\n            description: item.description,\r\n            style: item.style,\r\n            category: item.category_id || item.category?.id,\r\n            price: item.price\r\n        });\r\n    };\r\n\r\n    const handleSaveEdit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            const response = await fetch(`${API_URL}/api/products/${editItem.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({\r\n                    name: newItem.name,\r\n                    description: newItem.description,\r\n                    style: newItem.style,\r\n                    category_id: parseInt(newItem.category),\r\n                    price: parseFloat(newItem.price)\r\n                })\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to update item');\r\n\r\n            const updatedItem = await response.json();\r\n\r\n            setItems(prevItems =>\r\n                prevItems.map(item =>\r\n                    item.id === editItem.id ? { ...updatedItem, user_added: true } : item\r\n                )\r\n            );\r\n\r\n            setEditing(false);\r\n            setEditItem(null);\r\n            setNewItem({ name: \"\", description: \"\", style: \"\", category: \"\", price: 0 });\r\n\r\n        } catch (error) {\r\n            console.error('Error updating item:', error);\r\n            alert('Failed to update item. Please try again.');\r\n        }\r\n    };\r\n\r\n    if (!isLoggedIn) {\r\n        return <LoginPage onLoginSuccess={handleLoginSuccess} />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            {isLoading && <div className=\"loading-banner\">Loading...</div>}\r\n\r\n            <nav>\r\n                <button onClick={() => setCurrentPage(\"Home\")}>Home</button>\r\n                <button onClick={() => setCurrentPage(\"YourPage\")}>Your Page</button>\r\n                <button onClick={() => setCurrentPage(\"Charts\")}>Charts</button>\r\n                <button onClick={() => setCurrentPage(\"Categories\")}>Categories</button>\r\n                <button onClick={handleLogout}>Logout</button>\r\n            </nav>\r\n\r\n            {currentPage === \"Categories\" ? (\r\n                <CategoryManager API_URL={API_URL}\r\n                    token={localStorage.getItem(\"token\")} />\r\n            ) : currentPage === \"Home\" ? (\r\n                <HomePage\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    search={search}\r\n                    setSearch={setSearch}\r\n                    filterStyle={filterStyle}\r\n                    setFilterStyle={setFilterStyle}\r\n                    filterCategory={filterCategory}\r\n                    setFilterCategory={setFilterCategory}\r\n                    sortPrice={sortPrice}\r\n                    setSortPrice={setSortPrice}\r\n                    styles={styles}\r\n                    categories={categories}\r\n                    videoUrl={videoUrl}\r\n                />\r\n            ) : currentPage === \"YourPage\" ? (\r\n                <YourPage\r\n                    items={items}\r\n                    handleAddItem={handleAddItem}\r\n                    handleSaveEdit={handleSaveEdit}\r\n                    handleDeleteItem={handleDeleteItem}\r\n                    handleEditItem={handleEditItem}\r\n                    newItem={newItem}\r\n                    setNewItem={setNewItem}\r\n                    editing={editing}\r\n                    setEditing={setEditing}\r\n                    styles={styles}\r\n                    categoryList={categoryList}\r\n                />\r\n            ) : (\r\n                <Charts items={items} socket={socket} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}