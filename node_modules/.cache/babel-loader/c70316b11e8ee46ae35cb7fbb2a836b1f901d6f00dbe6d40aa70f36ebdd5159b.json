{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\labon\\\\jewelry-frontend\\\\jewelry-website\\\\frontEnd\\\\src\\\\pages\\\\Charts.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, Cell, ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst Charts = ({ items, socket }) => {\r\n    const [chartData, setChartData] = useState({\r\n        priceDistribution: [],\r\n        stylePopularity: [],\r\n        salesTrend: []\r\n    });\r\n\r\n    const generateSalesTrendData = () => {\r\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"];\r\n        return months.map((month) => ({\r\n            name: month,\r\n            sales: Math.floor(Math.random() * 10000) + 1000\r\n        }));\r\n    };\r\n\r\n    const updateCharts = () => {\r\n        if (!items || items.length === 0) return;\r\n\r\n        // Price distribution\r\n        const priceRanges = [\r\n            { label: \"$0-20\", min: 0, max: 20 },\r\n            { label: \"$21-50\", min: 21, max: 50 },\r\n            { label: \"$51-100\", min: 51, max: 100 },\r\n            { label: \"$100+\", min: 101, max: Infinity }\r\n        ];\r\n\r\n        const priceData = priceRanges.map(({ label, min, max }) => ({\r\n            name: label,\r\n            count: items.filter(item => item.price >= min && item.price <= max).length\r\n        }));\r\n\r\n        // Style popularity\r\n        const styleCounts = {};\r\n        items.forEach(item => {\r\n            styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\r\n        });\r\n\r\n        const styleData = Object.keys(styleCounts).map(style => ({\r\n            name: style,\r\n            count: styleCounts[style]\r\n        }));\r\n\r\n        setChartData({\r\n            priceDistribution: priceData,\r\n            stylePopularity: styleData,\r\n            salesTrend: generateSalesTrendData()\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateCharts();\r\n\r\n        if (socket) {\r\n            socket.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                if (['NEW_ITEM', 'UPDATED_ITEM', 'DELETED_ITEM'].includes(message.type)) {\r\n                    updateCharts();\r\n                }\r\n            };\r\n        }\r\n\r\n        const salesInterval = setInterval(() => {\r\n            setChartData(prev => ({\r\n                ...prev,\r\n                salesTrend: generateSalesTrendData()\r\n            }));\r\n        }, 5000);\r\n\r\n        return () => {\r\n            clearInterval(salesInterval);\r\n            if (socket) {\r\n                socket.onmessage = null;\r\n            }\r\n        };\r\n    }, [items, socket]);\r\n\r\n        console.log(\"Items received in Charts:\", items);\r\n\r\n        if (!items || items.length === 0) {\r\n            console.error(\"No items data available.\");\r\n            return;\r\n        }\r\n\r\n        const updateCharts = () => { \r\n            const priceRanges = [\r\n                { label: \"$0-20\", min: 0, max: 20 },\r\n                { label: \"$21-50\", min: 21, max: 50 },\r\n                { label: \"$51-100\", min: 51, max: 100 },\r\n                { label: \"$100+\", min: 101, max: Infinity }\r\n            ];\r\n\r\n            const priceData = priceRanges.map(({ label, min, max }) => ({\r\n                name: label,\r\n                count: items.filter((item) => item.price >= min && item.price <= max).length\r\n            }));\r\n\r\n            const styleCounts = {};\r\n            items.forEach((item) => {\r\n                styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\r\n            });\r\n\r\n            const styleData = Object.keys(styleCounts).map((style) => ({\r\n                name: style,\r\n                count: styleCounts[style]\r\n            }));\r\n\r\n            setChartData({\r\n                priceDistribution: priceData,\r\n                stylePopularity: styleData,\r\n                salesTrend: generateSalesTrendData()\r\n            });\r\n        };\r\n\r\n        updateCharts();\r\n\r\n        const interval = setInterval(() => {\r\n            setChartData((prev) => ({\r\n                ...prev,\r\n                salesTrend: generateSalesTrendData()\r\n            }));\r\n        }, 5000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [items]);\r\n\r\n    if (!chartData.priceDistribution.length) return <div>Loading charts...</div>;\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <div className=\"chart-row\">\r\n                {/* Price Distribution Bar Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Price Distribution</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <BarChart data={chartData.priceDistribution}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n\r\n                {/* Style Popularity Pie Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Style Popularity</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <PieChart>\r\n                            <Pie\r\n                                data={chartData.stylePopularity}\r\n                                dataKey=\"count\"\r\n                                nameKey=\"name\"\r\n                                cx=\"50%\"\r\n                                cy=\"50%\"\r\n                                outerRadius={100}\r\n                                fill=\"#82ca9d\"\r\n                                label\r\n                            >\r\n                                {chartData.stylePopularity.map((entry, index) => (\r\n                                    <Cell\r\n                                        key={`cell - ${index}`}\r\n                                        fill={[\"#8884d8\", \"#FF8042\", \"#00C49F\", \"#FFBB28\", \"#01B43F\", \"#F4C59A\"][index % 6]}\r\n                                    />\r\n                                ))}\r\n                            </Pie>\r\n                            <Tooltip />\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chart-row\">\r\n                {/* Sales Trend Line Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Sales Trend (Live)</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <LineChart data={chartData.salesTrend}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line type=\"monotone\" dataKey=\"sales\" stroke=\"#FF8042\" />\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Charts;*/\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, Cell, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Charts = ({\n  items,\n  socket\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    priceDistribution: [],\n    stylePopularity: [],\n    salesTrend: [],\n    categoryDistribution: []\n  });\n  const [mockItems, setMockItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Styles and categories for mock data\n  const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\n  const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\n\n  // Generate mock item\n  const generateMockItem = useCallback(() => {\n    return {\n      id: `mock-${Date.now()}`,\n      name: `Item ${Math.floor(Math.random() * 1000)}`,\n      description: \"Mock data item\",\n      style: styles[Math.floor(Math.random() * styles.length)],\n      category: categories[Math.floor(Math.random() * categories.length)],\n      price: Math.floor(Math.random() * 200) + 10,\n      createdAt: new Date().toISOString()\n    };\n  }, []);\n\n  // Mock data generator effect\n  useEffect(() => {\n    // Initial batch of mock items\n    const initialMockItems = Array.from({\n      length: 5\n    }, () => generateMockItem());\n    setMockItems(initialMockItems);\n\n    // Set up addition/removal interval\n    const interval = setInterval(() => {\n      setMockItems(prev => {\n        // Add 1-2 new items\n        const newItems = [...prev, generateMockItem(), ...(Math.random() > 0.5 ? [generateMockItem()] : [])];\n\n        // Remove 1-2 old items if we have more than 5\n        if (newItems.length > 5) {\n          const removeCount = Math.random() > 0.5 ? 1 : 2;\n          return newItems.slice(removeCount);\n        }\n        return newItems;\n      });\n    }, 3000); // Update every 3 seconds\n\n    return () => clearInterval(interval);\n  }, [generateMockItem]);\n\n  // Calculate price distribution data\n  const calculatePriceData = useCallback(items => {\n    const priceRanges = [{\n      label: \"$0-20\",\n      min: 0,\n      max: 20\n    }, {\n      label: \"$21-50\",\n      min: 21,\n      max: 50\n    }, {\n      label: \"$51-100\",\n      min: 51,\n      max: 100\n    }, {\n      label: \"$100+\",\n      min: 101,\n      max: Infinity\n    }];\n    return priceRanges.map(({\n      label,\n      min,\n      max\n    }) => ({\n      name: label,\n      count: items.filter(item => item.price >= min && item.price <= max).length\n    }));\n  }, []);\n\n  // Calculate style popularity data\n  const calculateStyleData = useCallback(items => {\n    const styleCounts = {};\n    items.forEach(item => {\n      styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\n    });\n    return Object.keys(styleCounts).map(style => ({\n      name: style,\n      count: styleCounts[style]\n    }));\n  }, []);\n\n  // Calculate category distribution data\n  const calculateCategoryData = useCallback(items => {\n    const categoryCounts = {};\n    items.forEach(item => {\n      categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;\n    });\n    return Object.keys(categoryCounts).map(category => ({\n      name: category,\n      count: categoryCounts[category]\n    }));\n  }, []);\n\n  // Generate time-based sales trend data\n  const generateTimeBasedTrendData = useCallback(items => {\n    const now = new Date();\n    return Array.from({\n      length: 24\n    }, (_, i) => {\n      const time = new Date(now);\n      time.setHours(time.getHours() - (23 - i));\n      return {\n        name: time.toLocaleTimeString([], {\n          hour: '2-digit'\n        }),\n        sales: items.filter(item => {\n          const itemTime = new Date(item.createdAt || now);\n          return itemTime.getHours() === time.getHours();\n        }).length * 100\n      };\n    });\n  }, []);\n\n  // Update all charts when mock items change\n  useEffect(() => {\n    const combinedItems = [...items, ...mockItems];\n    setChartData({\n      priceDistribution: calculatePriceData(combinedItems),\n      stylePopularity: calculateStyleData(combinedItems),\n      salesTrend: generateTimeBasedTrendData(combinedItems),\n      categoryDistribution: calculateCategoryData(combinedItems)\n    });\n    setIsLoading(false);\n  }, [items, mockItems, calculatePriceData, calculateStyleData, calculateCategoryData, generateTimeBasedTrendData]);\n  const COLORS = ['#8884d8', '#FF8042', '#00C49F', '#FFBB28', '#01B43F', '#F4C59A'];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"chart-title\",\n        children: \"Jewelry Analytics Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chart-subtitle\",\n        children: \"Loading chart data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"chart-title\",\n      children: \"Jewelry Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"chart-subtitle\",\n      children: \"Live demo data - updates every 3 seconds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Price Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData.priceDistribution,\n            animationDuration: 300,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#8884d8\",\n              isAnimationActive: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Style Popularity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: chartData.stylePopularity,\n              dataKey: \"count\",\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 100,\n              label: ({\n                name,\n                percent\n              }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n              animationDuration: 300,\n              children: chartData.stylePopularity.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: (value, name, props) => [value, `${name}: ${(props.payload.percent * 100).toFixed(1)}%`]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Category Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: chartData.categoryDistribution,\n            animationDuration: 300,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#00C49F\",\n              isAnimationActive: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Sales Trend (Live)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(LineChart, {\n            data: chartData.salesTrend,\n            animationDuration: 300,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"sales\",\n              stroke: \"#FF8042\",\n              strokeWidth: 2,\n              dot: {\n                r: 4\n              },\n              activeDot: {\n                r: 6\n              },\n              isAnimationActive: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 9\n  }, this);\n};\n_s(Charts, \"nlnL/Q6XHMUT8Os9NhEvQvWjgOY=\");\n_c = Charts;\nexport default Charts;\nvar _c;\n$RefreshReg$(_c, \"Charts\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","BarChart","Bar","PieChart","Pie","LineChart","Line","XAxis","YAxis","Tooltip","CartesianGrid","Legend","Cell","ResponsiveContainer","jsxDEV","_jsxDEV","Charts","items","socket","_s","chartData","setChartData","priceDistribution","stylePopularity","salesTrend","categoryDistribution","mockItems","setMockItems","isLoading","setIsLoading","styles","categories","generateMockItem","id","Date","now","name","Math","floor","random","description","style","length","category","price","createdAt","toISOString","initialMockItems","Array","from","interval","setInterval","prev","newItems","removeCount","slice","clearInterval","calculatePriceData","priceRanges","label","min","max","Infinity","map","count","filter","item","calculateStyleData","styleCounts","forEach","Object","keys","calculateCategoryData","categoryCounts","generateTimeBasedTrendData","_","i","time","setHours","getHours","toLocaleTimeString","hour","sales","itemTime","combinedItems","COLORS","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","animationDuration","strokeDasharray","dataKey","fill","isAnimationActive","nameKey","cx","cy","outerRadius","percent","toFixed","entry","index","formatter","value","props","payload","type","stroke","strokeWidth","dot","r","activeDot","_c","$RefreshReg$"],"sources":["C:/Users/labon/jewelry-frontend/jewelry-website/frontEnd/src/pages/Charts.js"],"sourcesContent":["/*import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, Legend, Cell, ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst Charts = ({ items, socket }) => {\r\n    const [chartData, setChartData] = useState({\r\n        priceDistribution: [],\r\n        stylePopularity: [],\r\n        salesTrend: []\r\n    });\r\n\r\n    const generateSalesTrendData = () => {\r\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"];\r\n        return months.map((month) => ({\r\n            name: month,\r\n            sales: Math.floor(Math.random() * 10000) + 1000\r\n        }));\r\n    };\r\n\r\n    const updateCharts = () => {\r\n        if (!items || items.length === 0) return;\r\n\r\n        // Price distribution\r\n        const priceRanges = [\r\n            { label: \"$0-20\", min: 0, max: 20 },\r\n            { label: \"$21-50\", min: 21, max: 50 },\r\n            { label: \"$51-100\", min: 51, max: 100 },\r\n            { label: \"$100+\", min: 101, max: Infinity }\r\n        ];\r\n\r\n        const priceData = priceRanges.map(({ label, min, max }) => ({\r\n            name: label,\r\n            count: items.filter(item => item.price >= min && item.price <= max).length\r\n        }));\r\n\r\n        // Style popularity\r\n        const styleCounts = {};\r\n        items.forEach(item => {\r\n            styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\r\n        });\r\n\r\n        const styleData = Object.keys(styleCounts).map(style => ({\r\n            name: style,\r\n            count: styleCounts[style]\r\n        }));\r\n\r\n        setChartData({\r\n            priceDistribution: priceData,\r\n            stylePopularity: styleData,\r\n            salesTrend: generateSalesTrendData()\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateCharts();\r\n\r\n        if (socket) {\r\n            socket.onmessage = (event) => {\r\n                const message = JSON.parse(event.data);\r\n                if (['NEW_ITEM', 'UPDATED_ITEM', 'DELETED_ITEM'].includes(message.type)) {\r\n                    updateCharts();\r\n                }\r\n            };\r\n        }\r\n\r\n        const salesInterval = setInterval(() => {\r\n            setChartData(prev => ({\r\n                ...prev,\r\n                salesTrend: generateSalesTrendData()\r\n            }));\r\n        }, 5000);\r\n\r\n        return () => {\r\n            clearInterval(salesInterval);\r\n            if (socket) {\r\n                socket.onmessage = null;\r\n            }\r\n        };\r\n    }, [items, socket]);\r\n\r\n        console.log(\"Items received in Charts:\", items);\r\n\r\n        if (!items || items.length === 0) {\r\n            console.error(\"No items data available.\");\r\n            return;\r\n        }\r\n\r\n        const updateCharts = () => { \r\n            const priceRanges = [\r\n                { label: \"$0-20\", min: 0, max: 20 },\r\n                { label: \"$21-50\", min: 21, max: 50 },\r\n                { label: \"$51-100\", min: 51, max: 100 },\r\n                { label: \"$100+\", min: 101, max: Infinity }\r\n            ];\r\n\r\n            const priceData = priceRanges.map(({ label, min, max }) => ({\r\n                name: label,\r\n                count: items.filter((item) => item.price >= min && item.price <= max).length\r\n            }));\r\n\r\n            const styleCounts = {};\r\n            items.forEach((item) => {\r\n                styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\r\n            });\r\n\r\n            const styleData = Object.keys(styleCounts).map((style) => ({\r\n                name: style,\r\n                count: styleCounts[style]\r\n            }));\r\n\r\n            setChartData({\r\n                priceDistribution: priceData,\r\n                stylePopularity: styleData,\r\n                salesTrend: generateSalesTrendData()\r\n            });\r\n        };\r\n\r\n        updateCharts();\r\n\r\n        const interval = setInterval(() => {\r\n            setChartData((prev) => ({\r\n                ...prev,\r\n                salesTrend: generateSalesTrendData()\r\n            }));\r\n        }, 5000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [items]);\r\n\r\n    if (!chartData.priceDistribution.length) return <div>Loading charts...</div>;\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <div className=\"chart-row\">\r\n                {/* Price Distribution Bar Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Price Distribution</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <BarChart data={chartData.priceDistribution}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#8884d8\" />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n\r\n                {/* Style Popularity Pie Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Style Popularity</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <PieChart>\r\n                            <Pie\r\n                                data={chartData.stylePopularity}\r\n                                dataKey=\"count\"\r\n                                nameKey=\"name\"\r\n                                cx=\"50%\"\r\n                                cy=\"50%\"\r\n                                outerRadius={100}\r\n                                fill=\"#82ca9d\"\r\n                                label\r\n                            >\r\n                                {chartData.stylePopularity.map((entry, index) => (\r\n                                    <Cell\r\n                                        key={`cell - ${index}`}\r\n                                        fill={[\"#8884d8\", \"#FF8042\", \"#00C49F\", \"#FFBB28\", \"#01B43F\", \"#F4C59A\"][index % 6]}\r\n                                    />\r\n                                ))}\r\n                            </Pie>\r\n                            <Tooltip />\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chart-row\">\r\n                {/* Sales Trend Line Chart *\r\n                <div className=\"chart\">\r\n                    <h3>Sales Trend (Live)</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <LineChart data={chartData.salesTrend}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line type=\"monotone\" dataKey=\"sales\" stroke=\"#FF8042\" />\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Charts;*/\r\n\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n    BarChart, Bar, PieChart, Pie, LineChart, Line,\r\n    XAxis, YAxis, Tooltip, CartesianGrid, Legend, Cell, ResponsiveContainer\r\n} from \"recharts\";\r\n\r\nconst Charts = ({ items, socket }) => {\r\n    const [chartData, setChartData] = useState({\r\n        priceDistribution: [],\r\n        stylePopularity: [],\r\n        salesTrend: [],\r\n        categoryDistribution: []\r\n    });\r\n    const [mockItems, setMockItems] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Styles and categories for mock data\r\n    const styles = [\"punk\", \"grunge\", \"Y2K\", \"hippie\", \"classic\", \"modern\"];\r\n    const categories = [\"earrings\", \"rings\", \"necklace\", \"piercing\", \"bracelets\", \"body chain\"];\r\n\r\n    // Generate mock item\r\n    const generateMockItem = useCallback(() => {\r\n        return {\r\n            id: `mock-${Date.now()}`,\r\n            name: `Item ${Math.floor(Math.random() * 1000)}`,\r\n            description: \"Mock data item\",\r\n            style: styles[Math.floor(Math.random() * styles.length)],\r\n            category: categories[Math.floor(Math.random() * categories.length)],\r\n            price: Math.floor(Math.random() * 200) + 10,\r\n            createdAt: new Date().toISOString()\r\n        };\r\n    }, []);\r\n\r\n    // Mock data generator effect\r\n    useEffect(() => {\r\n        // Initial batch of mock items\r\n        const initialMockItems = Array.from({ length: 5 }, () => generateMockItem());\r\n        setMockItems(initialMockItems);\r\n\r\n        // Set up addition/removal interval\r\n        const interval = setInterval(() => {\r\n            setMockItems(prev => {\r\n                // Add 1-2 new items\r\n                const newItems = [...prev,\r\n                generateMockItem(),\r\n                ...(Math.random() > 0.5 ? [generateMockItem()] : [])\r\n                ];\r\n\r\n                // Remove 1-2 old items if we have more than 5\r\n                if (newItems.length > 5) {\r\n                    const removeCount = Math.random() > 0.5 ? 1 : 2;\r\n                    return newItems.slice(removeCount);\r\n                }\r\n                return newItems;\r\n            });\r\n        }, 3000); // Update every 3 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }, [generateMockItem]);\r\n\r\n    // Calculate price distribution data\r\n    const calculatePriceData = useCallback((items) => {\r\n        const priceRanges = [\r\n            { label: \"$0-20\", min: 0, max: 20 },\r\n            { label: \"$21-50\", min: 21, max: 50 },\r\n            { label: \"$51-100\", min: 51, max: 100 },\r\n            { label: \"$100+\", min: 101, max: Infinity }\r\n        ];\r\n\r\n        return priceRanges.map(({ label, min, max }) => ({\r\n            name: label,\r\n            count: items.filter(item => item.price >= min && item.price <= max).length\r\n        }));\r\n    }, []);\r\n\r\n    // Calculate style popularity data\r\n    const calculateStyleData = useCallback((items) => {\r\n        const styleCounts = {};\r\n        items.forEach(item => {\r\n            styleCounts[item.style] = (styleCounts[item.style] || 0) + 1;\r\n        });\r\n        return Object.keys(styleCounts).map(style => ({\r\n            name: style,\r\n            count: styleCounts[style]\r\n        }));\r\n    }, []);\r\n\r\n    // Calculate category distribution data\r\n    const calculateCategoryData = useCallback((items) => {\r\n        const categoryCounts = {};\r\n        items.forEach(item => {\r\n            categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;\r\n        });\r\n        return Object.keys(categoryCounts).map(category => ({\r\n            name: category,\r\n            count: categoryCounts[category]\r\n        }));\r\n    }, []);\r\n\r\n    // Generate time-based sales trend data\r\n    const generateTimeBasedTrendData = useCallback((items) => {\r\n        const now = new Date();\r\n        return Array.from({ length: 24 }, (_, i) => {\r\n            const time = new Date(now);\r\n            time.setHours(time.getHours() - (23 - i));\r\n\r\n            return {\r\n                name: time.toLocaleTimeString([], { hour: '2-digit' }),\r\n                sales: items.filter(item => {\r\n                    const itemTime = new Date(item.createdAt || now);\r\n                    return itemTime.getHours() === time.getHours();\r\n                }).length * 100\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    // Update all charts when mock items change\r\n    useEffect(() => {\r\n        const combinedItems = [...items, ...mockItems];\r\n        setChartData({\r\n            priceDistribution: calculatePriceData(combinedItems),\r\n            stylePopularity: calculateStyleData(combinedItems),\r\n            salesTrend: generateTimeBasedTrendData(combinedItems),\r\n            categoryDistribution: calculateCategoryData(combinedItems)\r\n        });\r\n        setIsLoading(false);\r\n    }, [items, mockItems, calculatePriceData, calculateStyleData, calculateCategoryData, generateTimeBasedTrendData]);\r\n\r\n    const COLORS = ['#8884d8', '#FF8042', '#00C49F', '#FFBB28', '#01B43F', '#F4C59A'];\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"chart-container\">\r\n                <h2 className=\"chart-title\">Jewelry Analytics Dashboard</h2>\r\n                <p className=\"chart-subtitle\">Loading chart data...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-container\">\r\n            <h2 className=\"chart-title\">Jewelry Analytics Dashboard</h2>\r\n            <p className=\"chart-subtitle\">Live demo data - updates every 3 seconds</p>\r\n\r\n            <div className=\"chart-row\">\r\n                <div className=\"chart-card\">\r\n                    <h3>Price Distribution</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <BarChart data={chartData.priceDistribution} animationDuration={300}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#8884d8\" isAnimationActive={true} />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n\r\n                <div className=\"chart-card\">\r\n                    <h3>Style Popularity</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <PieChart>\r\n                            <Pie\r\n                                data={chartData.stylePopularity}\r\n                                dataKey=\"count\"\r\n                                nameKey=\"name\"\r\n                                cx=\"50%\"\r\n                                cy=\"50%\"\r\n                                outerRadius={100}\r\n                                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n                                animationDuration={300}\r\n                            >\r\n                                {chartData.stylePopularity.map((entry, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                                ))}\r\n                            </Pie>\r\n                            <Tooltip formatter={(value, name, props) => [value, `${name}: ${(props.payload.percent * 100).toFixed(1)}%`]} />\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chart-row\">\r\n                <div className=\"chart-card\">\r\n                    <h3>Category Distribution</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <BarChart data={chartData.categoryDistribution} animationDuration={300}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#00C49F\" isAnimationActive={true} />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n\r\n                <div className=\"chart-card\">\r\n                    <h3>Sales Trend (Live)</h3>\r\n                    <ResponsiveContainer width=\"100%\" height={300}>\r\n                        <LineChart data={chartData.salesTrend} animationDuration={300}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"name\" />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line\r\n                                type=\"monotone\"\r\n                                dataKey=\"sales\"\r\n                                stroke=\"#FF8042\"\r\n                                strokeWidth={2}\r\n                                dot={{ r: 4 }}\r\n                                activeDot={{ r: 6 }}\r\n                                isAnimationActive={true}\r\n                            />\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Charts;"],"mappingsaAAa,EAAEC,MAAM,EAAEC,IAAI,EAAEC,mBAAmB,QACpE,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,MAAM,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC;IACvCwB,iBAAiB,EAAE,EAAE;IACrBC,eAAe,EAAE,EAAE;IACnBC,UAAU,EAAE,EAAE;IACdC,oBAAoB,EAAE;EAC1B,CAAC,CAAC;EACF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMgC,MAAM,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC;EACvE,MAAMC,UAAU,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,YAAY,CAAC;;EAE3F;EACA,MAAMC,gBAAgB,GAAGhC,WAAW,CAAC,MAAM;IACvC,OAAO;MACHiC,EAAE,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MACxBC,IAAI,EAAE,QAAQC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE;MAChDC,WAAW,EAAE,gBAAgB;MAC7BC,KAAK,EAAEX,MAAM,CAACO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGT,MAAM,CAACY,MAAM,CAAC,CAAC;MACxDC,QAAQ,EAAEZ,UAAU,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,UAAU,CAACW,MAAM,CAAC,CAAC;MACnEE,KAAK,EAAEP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;MAC3CM,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA/C,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgD,gBAAgB,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEP,MAAM,EAAE;IAAE,CAAC,EAAE,MAAMV,gBAAgB,CAAC,CAAC,CAAC;IAC5EL,YAAY,CAACoB,gBAAgB,CAAC;;IAE9B;IACA,MAAMG,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BxB,YAAY,CAACyB,IAAI,IAAI;QACjB;QACA,MAAMC,QAAQ,GAAG,CAAC,GAAGD,IAAI,EACzBpB,gBAAgB,CAAC,CAAC,EAClB,IAAIK,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAACP,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CACnD;;QAED;QACA,IAAIqB,QAAQ,CAACX,MAAM,GAAG,CAAC,EAAE;UACrB,MAAMY,WAAW,GAAGjB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;UAC/C,OAAOc,QAAQ,CAACE,KAAK,CAACD,WAAW,CAAC;QACtC;QACA,OAAOD,QAAQ;MACnB,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMG,aAAa,CAACN,QAAQ,CAAC;EACxC,CAAC,EAAE,CAAClB,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAMyB,kBAAkB,GAAGzD,WAAW,CAAEiB,KAAK,IAAK;IAC9C,MAAMyC,WAAW,GAAG,CAChB;MAAEC,KAAK,EAAE,OAAO;MAAEC,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAG,CAAC,EACnC;MAAEF,KAAK,EAAE,QAAQ;MAAEC,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAC,EACrC;MAAEF,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAI,CAAC,EACvC;MAAEF,KAAK,EAAE,OAAO;MAAEC,GAAG,EAAE,GAAG;MAAEC,GAAG,EAAEC;IAAS,CAAC,CAC9C;IAED,OAAOJ,WAAW,CAACK,GAAG,CAAC,CAAC;MAAEJ,KAAK;MAAEC,GAAG;MAAEC;IAAI,CAAC,MAAM;MAC7CzB,IAAI,EAAEuB,KAAK;MACXK,KAAK,EAAE/C,KAAK,CAACgD,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACtB,KAAK,IAAIgB,GAAG,IAAIM,IAAI,CAACtB,KAAK,IAAIiB,GAAG,CAAC,CAACnB;IACxE,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMyB,kBAAkB,GAAGnE,WAAW,CAAEiB,KAAK,IAAK;IAC9C,MAAMmD,WAAW,GAAG,CAAC,CAAC;IACtBnD,KAAK,CAACoD,OAAO,CAACH,IAAI,IAAI;MAClBE,WAAW,CAACF,IAAI,CAACzB,KAAK,CAAC,GAAG,CAAC2B,WAAW,CAACF,IAAI,CAACzB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAChE,CAAC,CAAC;IACF,OAAO6B,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACL,GAAG,CAACtB,KAAK,KAAK;MAC1CL,IAAI,EAAEK,KAAK;MACXuB,KAAK,EAAEI,WAAW,CAAC3B,KAAK;IAC5B,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM+B,qBAAqB,GAAGxE,WAAW,CAAEiB,KAAK,IAAK;IACjD,MAAMwD,cAAc,GAAG,CAAC,CAAC;IACzBxD,KAAK,CAACoD,OAAO,CAACH,IAAI,IAAI;MAClBO,cAAc,CAACP,IAAI,CAACvB,QAAQ,CAAC,GAAG,CAAC8B,cAAc,CAACP,IAAI,CAACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5E,CAAC,CAAC;IACF,OAAO2B,MAAM,CAACC,IAAI,CAACE,cAAc,CAAC,CAACV,GAAG,CAACpB,QAAQ,KAAK;MAChDP,IAAI,EAAEO,QAAQ;MACdqB,KAAK,EAAES,cAAc,CAAC9B,QAAQ;IAClC,CAAC,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM+B,0BAA0B,GAAG1E,WAAW,CAAEiB,KAAK,IAAK;IACtD,MAAMkB,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,OAAOc,KAAK,CAACC,IAAI,CAAC;MAAEP,MAAM,EAAE;IAAG,CAAC,EAAE,CAACiC,CAAC,EAAEC,CAAC,KAAK;MACxC,MAAMC,IAAI,GAAG,IAAI3C,IAAI,CAACC,GAAG,CAAC;MAC1B0C,IAAI,CAACC,QAAQ,CAACD,IAAI,CAACE,QAAQ,CAAC,CAAC,IAAI,EAAE,GAAGH,CAAC,CAAC,CAAC;MAEzC,OAAO;QACHxC,IAAI,EAAEyC,IAAI,CAACG,kBAAkB,CAAC,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC;QACtDC,KAAK,EAAEjE,KAAK,CAACgD,MAAM,CAACC,IAAI,IAAI;UACxB,MAAMiB,QAAQ,GAAG,IAAIjD,IAAI,CAACgC,IAAI,CAACrB,SAAS,IAAIV,GAAG,CAAC;UAChD,OAAOgD,QAAQ,CAACJ,QAAQ,CAAC,CAAC,KAAKF,IAAI,CAACE,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAACrC,MAAM,GAAG;MAChB,CAAC;IACL,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA3C,SAAS,CAAC,MAAM;IACZ,MAAMqF,aAAa,GAAG,CAAC,GAAGnE,KAAK,EAAE,GAAGS,SAAS,CAAC;IAC9CL,YAAY,CAAC;MACTC,iBAAiB,EAAEmC,kBAAkB,CAAC2B,aAAa,CAAC;MACpD7D,eAAe,EAAE4C,kBAAkB,CAACiB,aAAa,CAAC;MAClD5D,UAAU,EAAEkD,0BAA0B,CAACU,aAAa,CAAC;MACrD3D,oBAAoB,EAAE+C,qBAAqB,CAACY,aAAa;IAC7D,CAAC,CAAC;IACFvD,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,CAACZ,KAAK,EAAES,SAAS,EAAE+B,kBAAkB,EAAEU,kBAAkB,EAAEK,qBAAqB,EAAEE,0BAA0B,CAAC,CAAC;EAEjH,MAAMW,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;EAEjF,IAAIzD,SAAS,EAAE;IACX,oBACIb,OAAA;MAAKuE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BxE,OAAA;QAAIuE,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5D5E,OAAA;QAAGuE,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAEd;EAEA,oBACI5E,OAAA;IAAKuE,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5BxE,OAAA;MAAIuE,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5D5E,OAAA;MAAGuE,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAC;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAE1E5E,OAAA;MAAKuE,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtBxE,OAAA;QAAKuE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBxE,OAAA;UAAAwE,QAAA,EAAI;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B5E,OAAA,CAACF,mBAAmB;UAAC+E,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC1CxE,OAAA,CAACd,QAAQ;YAAC6F,IAAI,EAAE1E,SAAS,CAACE,iBAAkB;YAACyE,iBAAiB,EAAE,GAAI;YAAAR,QAAA,gBAChExE,OAAA,CAACL,aAAa;cAACsF,eAAe,EAAC;YAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvC5E,OAAA,CAACR,KAAK;cAAC0F,OAAO,EAAC;YAAM;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxB5E,OAAA,CAACP,KAAK;cAAAgF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACT5E,OAAA,CAACN,OAAO;cAAA+E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACX5E,OAAA,CAACJ,MAAM;cAAA6E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACV5E,OAAA,CAACb,GAAG;cAAC+F,OAAO,EAAC,OAAO;cAACC,IAAI,EAAC,SAAS;cAACC,iBAAiB,EAAE;YAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eAEN5E,OAAA;QAAKuE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBxE,OAAA;UAAAwE,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzB5E,OAAA,CAACF,mBAAmB;UAAC+E,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC1CxE,OAAA,CAACZ,QAAQ;YAAAoF,QAAA,gBACLxE,OAAA,CAACX,GAAG;cACA0F,IAAI,EAAE1E,SAAS,CAACG,eAAgB;cAChC0E,OAAO,EAAC,OAAO;cACfG,OAAO,EAAC,MAAM;cACdC,EAAE,EAAC,KAAK;cACRC,EAAE,EAAC,KAAK;cACRC,WAAW,EAAE,GAAI;cACjB5C,KAAK,EAAEA,CAAC;gBAAEvB,IAAI;gBAAEoE;cAAQ,CAAC,KAAK,GAAGpE,IAAI,KAAK,CAACoE,OAAO,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAI;cACxEV,iBAAiB,EAAE,GAAI;cAAAR,QAAA,EAEtBnE,SAAS,CAACG,eAAe,CAACwC,GAAG,CAAC,CAAC2C,KAAK,EAAEC,KAAK,kBACxC5F,OAAA,CAACH,IAAI;gBAAuBsF,IAAI,EAAEb,MAAM,CAACsB,KAAK,GAAGtB,MAAM,CAAC3C,MAAM;cAAE,GAArD,QAAQiE,KAAK,EAAE;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAwC,CACrE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD,CAAC,eACN5E,OAAA,CAACN,OAAO;cAACmG,SAAS,EAAEA,CAACC,KAAK,EAAEzE,IAAI,EAAE0E,KAAK,KAAK,CAACD,KAAK,EAAE,GAAGzE,IAAI,KAAK,CAAC0E,KAAK,CAACC,OAAO,CAACP,OAAO,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG;YAAE;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1G;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEN5E,OAAA;MAAKuE,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtBxE,OAAA;QAAKuE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBxE,OAAA;UAAAwE,QAAA,EAAI;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9B5E,OAAA,CAACF,mBAAmB;UAAC+E,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC1CxE,OAAA,CAACd,QAAQ;YAAC6F,IAAI,EAAE1E,SAAS,CAACK,oBAAqB;YAACsE,iBAAiB,EAAE,GAAI;YAAAR,QAAA,gBACnExE,OAAA,CAACL,aAAa;cAACsF,eAAe,EAAC;YAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvC5E,OAAA,CAACR,KAAK;cAAC0F,OAAO,EAAC;YAAM;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxB5E,OAAA,CAACP,KAAK;cAAAgF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACT5E,OAAA,CAACN,OAAO;cAAA+E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACX5E,OAAA,CAACJ,MAAM;cAAA6E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACV5E,OAAA,CAACb,GAAG;cAAC+F,OAAO,EAAC,OAAO;cAACC,IAAI,EAAC,SAAS;cAACC,iBAAiB,EAAE;YAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eAEN5E,OAAA;QAAKuE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBxE,OAAA;UAAAwE,QAAA,EAAI;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3B5E,OAAA,CAACF,mBAAmB;UAAC+E,KAAK,EAAC,MAAM;UAACC,MAAM,EAAE,GAAI;UAAAN,QAAA,eAC1CxE,OAAA,CAACV,SAAS;YAACyF,IAAI,EAAE1E,SAAS,CAACI,UAAW;YAACuE,iBAAiB,EAAE,GAAI;YAAAR,QAAA,gBAC1DxE,OAAA,CAACL,aAAa;cAACsF,eAAe,EAAC;YAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvC5E,OAAA,CAACR,KAAK;cAAC0F,OAAO,EAAC;YAAM;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxB5E,OAAA,CAACP,KAAK;cAAAgF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACT5E,OAAA,CAACN,OAAO;cAAA+E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACX5E,OAAA,CAACJ,MAAM;cAAA6E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACV5E,OAAA,CAACT,IAAI;cACD0G,IAAI,EAAC,UAAU;cACff,OAAO,EAAC,OAAO;cACfgB,MAAM,EAAC,SAAS;cAChBC,WAAW,EAAE,CAAE;cACfC,GAAG,EAAE;gBAAEC,CAAC,EAAE;cAAE,CAAE;cACdC,SAAS,EAAE;gBAAED,CAAC,EAAE;cAAE,CAAE;cACpBjB,iBAAiB,EAAE;YAAK;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACxE,EAAA,CAxNIH,MAAM;AAAAsG,EAAA,GAANtG,MAAM;AA0NZ,eAAeA,MAAM;AAAC,IAAAsG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}